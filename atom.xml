<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>发现新大陆</title>
  
  <subtitle>冷静，坚持，心得体会</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://caixw.cn/"/>
  <updated>2022-08-18T11:49:52.633Z</updated>
  <id>http://caixw.cn/</id>
  
  <author>
    <name>William Cai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spark访问mysql数据库实例</title>
    <link href="http://caixw.cn/2022/08/18/2022081801/"/>
    <id>http://caixw.cn/2022/08/18/2022081801/</id>
    <published>2022-08-18T11:41:07.000Z</published>
    <updated>2022-08-18T11:49:52.633Z</updated>
    
    <content type="html"><![CDATA[<p>1、上传msyql的jar到spark的目录下<br><code>~/.m2/repository/mysql/mysql-connector-java/5.1.47  scp mysql-connector-java-5.1.47.jar root@10.90.9.114:/opt/spark-2.2.3-bin-hadoop2.6/jars</code></p><p>2、启动spark 客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# !1023</span><br><span class="line">spark-shell --master local[2]</span><br><span class="line">Using Spark&apos;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">Setting default log level to &quot;WARN&quot;.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">22/08/18 07:36:46 WARN Utils: Your hostname, localhost.localdomain resolves to a loopback address: 127.0.0.1; using 10.90.9.114 instead (on interface eth0)</span><br><span class="line">22/08/18 07:36:46 WARN Utils: Set SPARK_LOCAL_IP if you need to bind to another address</span><br><span class="line">22/08/18 07:36:46 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Spark context Web UI available at http://10.90.9.114:4040</span><br><span class="line">Spark context available as &apos;sc&apos; (master = local[2], app id = local-1660822607218).</span><br><span class="line">Spark session available as &apos;spark&apos;.</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version 2.2.3</span><br><span class="line">      /_/</span><br></pre></td></tr></table></figure></p><p>3、编写访问代码<br><code>spark.read.format(&quot;jdbc&quot;).option(&quot;driver&quot;, &quot;com.mysql.jdbc.Driver&quot;)            .option(&quot;url&quot;, &quot;jdbc:mysql://10.90.9.120:3306/sys?useSSL=false&quot;)   .option(&quot;dbtable&quot;, &quot;sys_config&quot;)                   .option(&quot;user&quot;, &quot;root&quot;).option(&quot;password&quot;,&quot;xxxx&quot;).load().show(10)</code></p><p>4、执行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.read</span><br><span class="line">res12: org.apache.spark.sql.DataFrameReader = org.apache.spark.sql.DataFrameReader@59fa5a39</span><br><span class="line"></span><br><span class="line">scala&gt; .format(&quot;jdbc&quot;)</span><br><span class="line">res13: org.apache.spark.sql.DataFrameReader = org.apache.spark.sql.DataFrameReader@59fa5a39</span><br><span class="line"></span><br><span class="line">scala&gt; .option(&quot;driver&quot;, &quot;com.mysql.jdbc.Driver&quot;)</span><br><span class="line">res14: org.apache.spark.sql.DataFrameReader = org.apache.spark.sql.DataFrameReader@59fa5a39</span><br><span class="line"></span><br><span class="line">scala&gt; .option(&quot;url&quot;, &quot;jdbc:mysql://10.90.9.120:3306/sys?useSSL=false&quot;)</span><br><span class="line">res15: org.apache.spark.sql.DataFrameReader = org.apache.spark.sql.DataFrameReader@59fa5a39</span><br><span class="line"></span><br><span class="line">scala&gt; .option(&quot;dbtable&quot;, &quot;sys_config&quot;)</span><br><span class="line">res16: org.apache.spark.sql.DataFrameReader = org.apache.spark.sql.DataFrameReader@59fa5a39</span><br><span class="line"></span><br><span class="line">scala&gt; .option(&quot;user&quot;, &quot;root&quot;).option(&quot;password&quot;,&quot;Xx00123&quot;).load().show(10)</span><br><span class="line">+--------------------+-----+-------------------+------+</span><br><span class="line">|            variable|value|           set_time|set_by|</span><br><span class="line">+--------------------+-----+-------------------+------+</span><br><span class="line">|diagnostics.allow...|  OFF|2021-08-04 11:39:10|  null|</span><br><span class="line">|diagnostics.inclu...|  OFF|2021-08-04 11:39:10|  null|</span><br><span class="line">|ps_thread_trx_inf...|65535|2021-08-04 11:39:10|  null|</span><br><span class="line">|statement_perform...|  100|2021-08-04 11:39:10|  null|</span><br><span class="line">|statement_perform...| null|2021-08-04 11:39:10|  null|</span><br><span class="line">|statement_truncat...|   64|2021-08-04 11:39:10|  null|</span><br><span class="line">+--------------------+-----+-------------------+------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、上传msyql的jar到spark的目录下&lt;br&gt;&lt;code&gt;~/.m2/repository/mysql/mysql-connector-java/5.1.47  scp mysql-connector-java-5.1.47.jar root@10.90.9.11
      
    
    </summary>
    
    
      <category term="大数据,spark" scheme="http://caixw.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE-spark/"/>
    
  </entry>
  
  <entry>
    <title>hbase单实例搭建</title>
    <link href="http://caixw.cn/2022/07/02/2022070201/"/>
    <id>http://caixw.cn/2022/07/02/2022070201/</id>
    <published>2022-07-02T01:30:21.000Z</published>
    <updated>2022-07-02T02:01:13.317Z</updated>
    
    <content type="html"><![CDATA[<p>一、安装前置条件说明<br>1.1 JDK版本说明<br>HBase 需要依赖 JDK 环境，同时 HBase 2.0+ 以上版本不再支持 JDK 1.7 ，需要安装 JDK 1.8+ 。JDK 安装方式见本仓库：</p><p>Linux 环境下 JDK 安装</p><p>1.2 Standalone模式和伪集群模式的区别<br>在 Standalone 模式下，所有守护进程都运行在一个 jvm 进程/实例中；<br>在伪分布模式下，HBase 仍然在单个主机上运行，但是每个守护进程 (HMaster，HRegionServer 和 ZooKeeper) 则分别作为一个单独的进程运行。<br>说明：两种模式任选其一进行部署即可，对于开发测试来说区别不大。</p><p>二、Standalone 模式<br>2.1 下载并解压<br>从官方网站 下载所需要版本的二进制安装包，并进行解压：</p><h1 id="tar-zxvf-hbase-2-1-4-bin-tar-gz"><a href="#tar-zxvf-hbase-2-1-4-bin-tar-gz" class="headerlink" title="tar -zxvf hbase-2.1.4-bin.tar.gz"></a>tar -zxvf hbase-2.1.4-bin.tar.gz</h1><p>2.2 配置环境变量</p><h1 id="vim-etc-profile"><a href="#vim-etc-profile" class="headerlink" title="vim /etc/profile"></a>vim /etc/profile</h1><p>添加环境变量：</p><p>export HBASE_HOME=/usr/app/hbase-2.1.4<br>export PATH=$HBASE_HOME/bin:$PATH<br>使得配置的环境变量生效：</p><h1 id="source-etc-profile"><a href="#source-etc-profile" class="headerlink" title="source /etc/profile"></a>source /etc/profile</h1><p>2.3 进行HBase相关配置<br>修改安装目录下的 conf/hbase-env.sh,指定 JDK 的安装路径：</p><h1 id="The-java-implementation-to-use-Java-1-8-required"><a href="#The-java-implementation-to-use-Java-1-8-required" class="headerlink" title="The java implementation to use.  Java 1.8+ required."></a>The java implementation to use.  Java 1.8+ required.</h1><p>export JAVA_HOME=/usr/java/jdk1.8.0_201<br>修改安装目录下的 conf/hbase-site.xml，增加如下配置：</p><p><configuration><br> <property><br>    <name>hbase.rootdir</name><br>    <value>file:///home/hbase/rootdir</value><br>  </property><br>  <property><br>    <name>hbase.zookeeper.property.dataDir</name><br>    <value>/home/zookeeper/dataDir</value><br>  </property><br>  <property><br>    <name>hbase.unsafe.stream.capability.enforce</name><br>    <value>false</value><br>  </property><br></configuration><br>hbase.rootdir: 配置 hbase 数据的存储路径；</p><p>hbase.zookeeper.property.dataDir: 配置 zookeeper 数据的存储路径；</p><p>hbase.unsafe.stream.capability.enforce: 使用本地文件系统存储，不使用 HDFS 的情况下需要禁用此配置，设置为 false。</p><p>2.4 启动HBase<br>由于已经将 HBase 的 bin 目录配置到环境变量，直接使用以下命令启动：</p><h1 id="start-hbase-sh"><a href="#start-hbase-sh" class="headerlink" title="start-hbase.sh"></a>start-hbase.sh</h1><p>2.5 验证启动是否成功<br>验证方式一 ：使用 jps 命令查看 HMaster 进程是否启动。</p><p>[root@hadoop001 hbase-2.1.4]# jps<br>16336 Jps<br>15500 HMaster<br>验证方式二 ：访问 HBaseWeb UI 页面，默认端口为 16010 。<br><img src="/assets/blogImg/hbase01.jpg" alt="hbase"><br>hbase shell 报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IncompatibleClassChangeError: Found class jline.Terminal, but interface was expected</span><br></pre></td></tr></table></figure></p><p>解决办法如下：<br>1、下载最新的jline: wget <a href="http://www.java2s.com/ref/jar/jline-2.12.1.jar.zip" target="_blank" rel="noopener">http://www.java2s.com/ref/jar/jline-2.12.1.jar.zip</a><br>2、解压之后替换 jline-0.9.94.jar</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、安装前置条件说明&lt;br&gt;1.1 JDK版本说明&lt;br&gt;HBase 需要依赖 JDK 环境，同时 HBase 2.0+ 以上版本不再支持 JDK 1.7 ，需要安装 JDK 1.8+ 。JDK 安装方式见本仓库：&lt;/p&gt;
&lt;p&gt;Linux 环境下 JDK 安装&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="大数据 hbase" scheme="http://caixw.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE-hbase/"/>
    
  </entry>
  
  <entry>
    <title>读《稻盛和夫给年轻人的忠告》有感一</title>
    <link href="http://caixw.cn/2021/06/19/2021061902/"/>
    <id>http://caixw.cn/2021/06/19/2021061902/</id>
    <published>2021-06-19T03:27:25.000Z</published>
    <updated>2021-06-19T03:41:54.433Z</updated>
    
    <content type="html"><![CDATA[<p>   稻盛和夫说，人生就是一个心灵道场，我们每个人生活得好与坏，取决于自己的心态，心态好，那就是天堂，心态坏，那就是地狱；心态的好与坏，控制权在自己的手里，所以在社会上混，面临的第一座大山就是自己，越过了他，你就掌握了自己的人生；<br>   人生好比一个试验厂，它既有实验地狱的可能，也有实验天堂的可能，至于，你想要活在天堂或地狱，就看你自己的选择了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   稻盛和夫说，人生就是一个心灵道场，我们每个人生活得好与坏，取决于自己的心态，心态好，那就是天堂，心态坏，那就是地狱；心态的好与坏，控制权在自己的手里，所以在社会上混，面临的第一座大山就是自己，越过了他，你就掌握了自己的人生；&lt;br&gt;   人生好比一个试验厂，它既有实验
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://caixw.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库全量备份</title>
    <link href="http://caixw.cn/2021/06/19/2021061901/"/>
    <id>http://caixw.cn/2021/06/19/2021061901/</id>
    <published>2021-06-19T03:10:53.000Z</published>
    <updated>2021-06-19T03:19:03.948Z</updated>
    
    <content type="html"><![CDATA[<p>1、安装mysqldump<br>可以安装mysqldump命令，如果已经安装可以忽略</p><p><code>yum -y install holland-mysqldump.noarch</code></p><p>2、新建shell脚本<br><code>mysqldump -h10.90.12.200 -P 3306 -uroot  vehiclex &gt;/data/backup/vehiclex_$(date +%Y%m%d)_$(date +%H%M%S).sql</code></p><p>3、 定时任务执行脚本<br>crontab -e 加入定时任务脚本<br><code>0 4 * * * sh *.sh</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、安装mysqldump&lt;br&gt;可以安装mysqldump命令，如果已经安装可以忽略&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yum -y install holland-mysqldump.noarch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、新建shell脚本&lt;br&gt;&lt;code&gt;mysql
      
    
    </summary>
    
    
      <category term="技术" scheme="http://caixw.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>linux下面的 /var/log/sa文件作用</title>
    <link href="http://caixw.cn/2020/10/30/2020103002/"/>
    <id>http://caixw.cn/2020/10/30/2020103002/</id>
    <published>2020-10-30T07:09:15.000Z</published>
    <updated>2020-10-30T07:19:44.005Z</updated>
    
    <content type="html"><![CDATA[<p>/var/log/sa目录下包含每日由sysstat软件包收集的sar文件，这些文件可以用来分析网卡的流量走向，会保存7天内的<br>流量走心啊哥，超过7天会自动删除，我们可以使用sar查看历史负载</p><p>//查看指定文件CPU使用记录</p><p>#sar -f /var/log/sa/sa03</p><p>//查看指定文件1/5/15分钟平均负载记录</p><p>#sar -q -f /var/log/sa/sa03</p><p>//查看指定文件7点到9点CPU使用记录，如要看负载加参数-q</p><p>#sar -s 07:00:00 -e 10:00:00 -f /var/log/sa/sa03</p><p>安装sysstat工具包后会自动每10分钟采集一次脚本在/etc/cron.d/sysstat默认只保留7天的文件要保留更长时间要修改配置文件有人觉得是修改/etc/sysconfig/sysstat这个文件，其实不是的应该是/usr/lib/sa/sa2(64位/usr/lib64/sa/sa2)，来看看里面的代码HISTORY=7[ -r /etc/sysconfig/sysstat ] &amp;&amp; . /etc/sysconfig/sysstat[ ${HISTORY} -gt 28 ] &amp;&amp; HISTORY=28#就是这个了，如果sysstat文件设置了历史天数超过28天就不会生效的超过28天就要修改这个地方了。</p><p>不要小看这个命令，它能够让你对系统运行情况了如指掌。</p><p>细化补充：</p><p>-A：所有报告的总和</p><p>-u：输出CPU使用情况的统计信息</p><p>-v：输出inode、文件和其他内核表的统计信息</p><p>-d：输出每一个块设备的活动信息</p><p>-r：输出内存和交换空间的统计信息</p><p>-b：显示I/O和传送速率的统计信息</p><p>-a：文件读写情况</p><p>-c：输出进程统计信息，每秒创建的进程数</p><p>-R：输出内存页面的统计信息</p><p>-y：终端设备活动情况</p><p>-w：输出系统交换活动信息</p><p>内存分页监控:</p><p>sar -r -f /var/log/sa29 //查看历史内存</p><p>kbmemfree：这个值和free命令中的free值基本一致,所以它不包括buffer和cache的空间.</p><p>kbmemused：这个值和free命令中的used值基本一致,所以它包括buffer和cache的空间.</p><p>%memused：这个值是kbmemused和内存总量(不包括swap)的一个百分比.</p><p>kbbuffers和kbcached：这两个值就是free命令中的buffer和cache.</p><p>kbcommit：保证当前系统所需要的内存,即为了确保不溢出而需要的内存(RAM+swap).</p><p>%commit：这个值是kbcommit与内存总量(包括swap)的一个百分比.</p><p>内存分页监控</p><p>例如，每10秒采样一次，连续采样3次，监控内存分页：</p><p>sar -B 10 3</p><p>输出项说明：</p><p>pgpgin/s：表示每秒从磁盘或SWAP置换到内存的字节数(KB)</p><p>pgpgout/s：表示每秒从内存置换到磁盘或SWAP的字节数(KB)</p><p>fault/s：每秒钟系统产生的缺页数,即主缺页与次缺页之和(major + minor)</p><p>majflt/s：每秒钟产生的主缺页数.</p><p>pgfree/s：每秒被放入空闲队列中的页个数</p><p>pgscank/s：每秒被kswapd扫描的页个数</p><p>pgscand/s：每秒直接被扫描的页个数</p><p>pgsteal/s：每秒钟从cache中被清除来满足内存需要的页个数</p><p>%vmeff：每秒清除的页(pgsteal)占总扫描页(pgscank+pgscand)的百分比</p><p>I/O和传送速率监控</p><p>每10秒采样一次，连续采样3次，报告缓冲区的使用情况，需键入如下命令：</p><p>sar -b 10 3</p><p>屏幕显示如下：</p><p>18:51:05 tps rtps wtps bread/s bwrtn/s</p><p>18:51:15 0.00 0.00 0.00 0.00 0.00</p><p>18:51:25 1.92 0.00 1.92 0.00 22.65</p><p>18:51:35 0.00 0.00 0.00 0.00 0.00</p><p>Average: 0.64 0.00 0.64 0.00 7.59</p><p>输出项说明：</p><p>tps：每秒钟物理设备的 I/O 传输总量</p><p>rtps：每秒钟从物理设备读入的数据总量</p><p>wtps：每秒钟向物理设备写入的数据总量</p><p>bread/s：每秒钟从物理设备读入的数据量，单位为 块/s</p><p>bwrtn/s：每秒钟向物理设备写入的数据量，单位为 块/s</p><ol start="6"><li>进程队列长度和平均负载状态监控</li></ol><p>例如，每10秒采样一次，连续采样3次，监控进程队列长度和平均负载状态：</p><p>sar -q 10 3</p><p>屏幕显示如下：</p><p>19:25:50 runq-sz plist-sz ldavg-1 ldavg-5 ldavg-15</p><p>19:26:00 0 259 0.00 0.00 0.00</p><p>19:26:10 0 259 0.00 0.00 0.00</p><p>19:26:20 0 259 0.00 0.00 0.00</p><p>Average: 0 259 0.00 0.00 0.00</p><p>输出项说明：</p><p>runq-sz：运行队列的长度（等待运行的进程数）</p><p>plist-sz：进程列表中进程（processes）和线程（threads）的数量</p><p>ldavg-1：最后1分钟的系统平均负载（System load average）</p><p>ldavg-5：过去5分钟的系统平均负载</p><p>ldavg-15：过去15分钟的系统平均负载</p><ol start="7"><li>系统交换活动信息监控</li></ol><p>例如，每10秒采样一次，连续采样3次，监控系统交换活动信息：</p><p>sar - W 10 3</p><p>屏幕显示如下：</p><p>19:39:50 pswpin/s pswpout/s</p><p>19:40:00 0.00 0.00</p><p>19:40:10 0.00 0.00</p><p>19:40:20 0.00 0.00</p><p>Average: 0.00 0.00</p><p>输出项说明：</p><p>pswpin/s：每秒系统换入的交换页面（swap page）数量</p><p>pswpout/s：每秒系统换出的交换页面（swap page）数量</p><ol start="8"><li>设备使用情况监控</li></ol><p>例如，每10秒采样一次，连续采样3次，报告设备使用情况，需键入如下命令：</p><h1 id="sar-d-10-3-–p"><a href="#sar-d-10-3-–p" class="headerlink" title="sar -d 10 3 –p"></a>sar -d 10 3 –p</h1><p>屏幕显示如下：</p><p>17:45:54 DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util</p><p>17:46:04 scd0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00</p><p>17:46:04 sda 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00</p><p>17:46:04 vg_livedvd-lv_root 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00</p><p>17:46:04 vg_livedvd-lv_swap 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00</p><p>其中：</p><p>参数-p可以打印出sda,hdc等磁盘设备名称,如果不用参数-p,设备节点则有可能是dev8-0,dev22-0</p><p>tps:每秒从物理磁盘I/O的次数.多个逻辑请求会被合并为一个I/O磁盘请求,一次传输的大小是不确定的.</p><p>rd_sec/s:每秒读扇区的次数.</p><p>wr_sec/s:每秒写扇区的次数.</p><p>avgrq-sz:平均每次设备I/O操作的数据大小(扇区).</p><p>avgqu-sz:磁盘请求队列的平均长度.</p><p>await:从请求磁盘操作到系统完成处理,每次请求的平均消耗时间,包括请求队列等待时间,单位是毫秒(1秒=1000毫秒).</p><p>svctm:系统处理每次请求的平均时间,不包括在请求队列中消耗的时间.</p><p>%util:I/O请求占CPU的百分比,比率越大,说明越饱和.</p><ol><li><p>avgqu-sz 的值较低时，设备的利用率较高。</p></li><li><p>当%util的值接近 1% 时，表示设备带宽已经占满。</p></li></ol><p>inode、文件和其他内核表监控</p><p>例如，每10秒采样一次，连续采样3次，观察核心表的状态，需键入如下命令：</p><p>sar -v 10 3</p><p>屏幕显示如下：</p><p>17:10:49 dentunusd file-nr inode-nr pty-nr</p><p>17:10:59 6301 5664 12037 4</p><p>17:11:09 6301 5664 12037 4</p><p>17:11:19 6301 5664 12037 4</p><p>Average: 6301 5664 12037 4</p><p>输出项说明：</p><p>dentunusd：目录高速缓存中未被使用的条目数量</p><p>file-nr：文件句柄（file handle）的使用数量</p><p>inode-nr：索引节点句柄（inode handle）的使用数量</p><p>pty-nr：使用的pty数量</p><p>查看页面交换发生状况</p><p>sar -W</p><p>页面发生交换时，服务器的吞吐量会大幅下降；服务器状况不良时，如果怀疑因为内存不足而导致了页面交换的发生，可以使用这个命令来确认是否发生了大量的交换；</p><p>pswpin/s：每秒系统换入的交换页面（swap page）数量</p><p>pswpout/s：每秒系统换出的交换页面（swap page）数量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;/var/log/sa目录下包含每日由sysstat软件包收集的sar文件，这些文件可以用来分析网卡的流量走向，会保存7天内的&lt;br&gt;流量走心啊哥，超过7天会自动删除，我们可以使用sar查看历史负载&lt;/p&gt;
&lt;p&gt;//查看指定文件CPU使用记录&lt;/p&gt;
&lt;p&gt;#sar -f
      
    
    </summary>
    
    
      <category term="linux 运维" scheme="http://caixw.cn/tags/linux-%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>systemctl注意事项</title>
    <link href="http://caixw.cn/2020/10/30/2020103001/"/>
    <id>http://caixw.cn/2020/10/30/2020103001/</id>
    <published>2020-10-30T06:59:50.000Z</published>
    <updated>2020-10-30T07:08:30.187Z</updated>
    
    <content type="html"><![CDATA[<p>systemctl daemon-reload<br>解释： 重新加载某个服务的配置文件，如果新安装了一个服务，归属于systemctl管理，要使新服务的服务程序文件生效，需要重新加载配置；</p><p>systemctl –help  查看帮助!!!!!!!</p><p>systemctl  enable  |  disable |  is-enabled  | status  | is-active  unit</p><p>systemctl   get-default    |  set-default   graphical.target  | multi-user.target           islate 在线切换模式  </p><p>systemctl reload-daemon  加载新的unit 配置文件  </p><p>systemd  的 unit 的配置文件位置  ：  redhat 系列： 目录  /usr/lib/systemd/system/ 下<br>enable 是在  /etc/systemd/system/multi-user.target.wants/  这个目录下 做 unit 配置文件的软链：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;systemctl daemon-reload&lt;br&gt;解释： 重新加载某个服务的配置文件，如果新安装了一个服务，归属于systemctl管理，要使新服务的服务程序文件生效，需要重新加载配置；&lt;/p&gt;
&lt;p&gt;systemctl –help  查看帮助!!!!!!!&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="linux 运维" scheme="http://caixw.cn/tags/linux-%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>centOS7中允许3306通过防火墙</title>
    <link href="http://caixw.cn/2020/09/23/20200923/"/>
    <id>http://caixw.cn/2020/09/23/20200923/</id>
    <published>2020-09-23T03:27:49.000Z</published>
    <updated>2020-09-23T06:06:18.872Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## zone --&gt; 作用域</span><br><span class="line">## add-port=80/tcp --&gt; 添加端口，格式为：端口/通讯协议</span><br><span class="line">## permanent --&gt; 永久生效，没有此参数重启后失效</span><br><span class="line">sudo firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">## 开启3306端口后，必须重启防火墙，workbench或naivcat 就能连接到MySQL数据库了</span><br><span class="line">sudo systemctl restart firewalld.service</span><br><span class="line"></span><br><span class="line">## 查看端口号 80 是否开启</span><br><span class="line">firewall-cmd  --query-port=89/tcp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://caixw.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud对应的spring boot 版本</title>
    <link href="http://caixw.cn/2020/08/27/2020082701/"/>
    <id>http://caixw.cn/2020/08/27/2020082701/</id>
    <published>2020-08-27T14:09:00.000Z</published>
    <updated>2020-09-23T03:22:51.102Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Release Train Boot Version</span><br><span class="line">Hoxton</span><br><span class="line"></span><br><span class="line">2.2.x, 2.3.x (Starting with SR5)</span><br><span class="line"></span><br><span class="line">Greenwich</span><br><span class="line"></span><br><span class="line">2.1.x</span><br><span class="line"></span><br><span class="line">Finchley</span><br><span class="line"></span><br><span class="line">2.0.x</span><br><span class="line"></span><br><span class="line">Edgware</span><br><span class="line"></span><br><span class="line">1.5.x</span><br><span class="line"></span><br><span class="line">Dalston</span><br><span class="line"></span><br><span class="line">1.5.x</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="spring" scheme="http://caixw.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>rpm 安装 mysql-community-server-5.7</title>
    <link href="http://caixw.cn/2020/08/27/20200827/"/>
    <id>http://caixw.cn/2020/08/27/20200827/</id>
    <published>2020-08-27T09:20:12.000Z</published>
    <updated>2020-09-23T07:40:21.988Z</updated>
    
    <content type="html"><![CDATA[<p>在mysql 官网下载 mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar<br>然后解压：<br> tar -xvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar<br> 按照依赖关系依次安装rpm包 依赖关系依次为common→libs→client→server<br>在安装过程中会出现如下问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zegr90gig0zej8pvbk8Z tmp]# rpm -ivh mysql-community-server-5.7.31-1.el7.x86_64.rpm</span><br><span class="line">警告：mysql-community-server-5.7.31-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">libaio.so.1()(64bit) 被 mysql-community-server-5.7.31-1.el7.x86_64 需要</span><br><span class="line">libaio.so.1(LIBAIO_0.1)(64bit) 被 mysql-community-server-5.7.31-1.el7.x86_64 需要</span><br><span class="line">libaio.so.1(LIBAIO_0.4)(64bit) 被 mysql-community-server-5.7.31-1.el7.x86_64 需要</span><br><span class="line">[root@iZ2zegr90gig0zej8pvbk8Z tmp]# rpm -ivh mysql-community-server-5.7.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>解决：yum install libaio</p><p>[root@iZ2zegr90gig0zej8pvbk8Z tmp]# rpm -ivh mysql-community-libs-5.7.31-1.el7.x86_64.rpm<br>警告：mysql-community-libs-5.7.31-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY<br>错误：依赖检测失败：<br>    mysql-community-common(x86-64) &gt;= 5.7.9 被 mysql-community-libs-5.7.31-1.el7.x86_64 需要</p><p>解决：清除yum里所有mysql依赖包</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br><span class="line"> yum remove mysql-libs</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在mysql 官网下载 mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar&lt;br&gt;然后解压：&lt;br&gt; tar -xvf mysql-5.7.25-1.el7.x86_64.rpm-bundle.tar&lt;br&gt; 按照依赖关系依次安装rpm包 依赖
      
    
    </summary>
    
    
      <category term="mysql5.7" scheme="http://caixw.cn/tags/mysql5-7/"/>
    
  </entry>
  
  <entry>
    <title>spring cloud 获取 nacos 配置</title>
    <link href="http://caixw.cn/2020/08/22/2020082201/"/>
    <id>http://caixw.cn/2020/08/22/2020082201/</id>
    <published>2020-08-22T11:50:59.000Z</published>
    <updated>2020-08-22T12:46:26.435Z</updated>
    
    <content type="html"><![CDATA[<p>(1) pom 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.2.1.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;`</span><br></pre></td></tr></table></figure><p>(2) 基本配置</p><p>boostrap.yml 或bootstrap.properties里加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server.port=8060</span><br><span class="line">spring.application.name=consumer</span><br><span class="line">spring.profiles.active=prod </span><br><span class="line">spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848</span><br><span class="line">spring.cloud.nacos.discovery.namespace=public</span><br><span class="line">spring.cloud.nacos.config.server-addr=127.0.0.1:8848 </span><br><span class="line">spring.cloud.nacos.config.namespace=public</span><br><span class="line">spring.cloud.nacos.config.file-extension=yml</span><br></pre></td></tr></table></figure><p>(3) 运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar --spring.profiles.active=prod xxx.jar  &amp;</span><br></pre></td></tr></table></figure><p>(4) 出现的问题<br>1、启动没有找到 profile,即为默认的profile ,default<br>解决方法在启动的时候加入参数： –spring.profiles.active=dev,test,prod<br>2、获取不到配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;(1) pom 依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
      <category term="spring cloud,nacos" scheme="http://caixw.cn/tags/spring-cloud-nacos/"/>
    
  </entry>
  
  <entry>
    <title>nginx的配置讲解</title>
    <link href="http://caixw.cn/2020/06/25/20200625/"/>
    <id>http://caixw.cn/2020/06/25/20200625/</id>
    <published>2020-06-25T08:51:21.000Z</published>
    <updated>2020-06-25T09:45:09.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、配置讲解"><a href="#1、配置讲解" class="headerlink" title="1、配置讲解"></a>1、配置讲解</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">user  nginx; --nginx 用户,默认是nobody</span><br><span class="line">worker_processes  1; -- 工作进程数</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn; -- 日志位置，级别</span><br><span class="line">pid        /var/run/nginx.pid;  -- 运行进程存放的位置</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile 1024; --单个进程打开文件的最大数，该数字会覆盖 ulimit -SLn 的值</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  20240; -- 单个进程可以运行同时建立外部连接的数量</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types; --指定当前文件中包含另一个文件的指令</span><br><span class="line">    default_type  application/octet-stream; --指定默认处理的文件类型是二进制</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main; --访问日志</span><br><span class="line"></span><br><span class="line">    sendfile        on;  --on让sendfile发挥作用，将文件的回写过程交给数据缓冲去去完成</span><br><span class="line">    #tcp_nopush     on; --让nginx在一个数据包中发送所有的头文件，而不是一个一个单独发</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65; --给客户端分配连接超时时间，服务器会在这个时间过后关闭连接。一般设置时间较短，可以让nginx工作持续性更好</span><br><span class="line"></span><br><span class="line">    #gzip  on; --是告诉nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf; --包含其他的server 配置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123; -- 与http 类似,该配置可以使用一个公网ip访问多个内网服务器</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 10222;</span><br><span class="line">    proxy_pass 172.29.58.2:22;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 10223;</span><br><span class="line">    proxy_pass 172.29.58.3:22;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 10224;</span><br><span class="line">    proxy_pass 172.29.58.4:22;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 13306;</span><br><span class="line">    proxy_pass 172.29.58.2:13306;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 18086;</span><br><span class="line">    proxy_pass 172.29.58.2:8086;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 16379;</span><br><span class="line">    proxy_pass 172.29.58.2:6379;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9001;</span><br><span class="line">    proxy_pass 172.29.58.3:9001;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9002;</span><br><span class="line">    proxy_pass 172.29.58.3:9002;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9003;</span><br><span class="line">    proxy_pass 172.29.58.3:9003;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9004;</span><br><span class="line">    proxy_pass 172.29.58.3:9004;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9005;</span><br><span class="line">    proxy_pass 172.29.58.1:9005;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9006;</span><br><span class="line">    proxy_pass 172.29.58.3:9006;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 9098;</span><br><span class="line">    proxy_pass 172.29.58.3:9098;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 23306;</span><br><span class="line">    proxy_pass 172.29.58.4:13306;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 28086;</span><br><span class="line">    proxy_pass 172.29.58.4:8086;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 26379;</span><br><span class="line">    proxy_pass 172.29.58.4:6379;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    proxy_pass 172.29.58.3:8080;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    proxy_pass 172.29.58.3:80;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 31521;</span><br><span class="line">    proxy_pass 10.99.101.2:1521;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    listen 31522;</span><br><span class="line">    proxy_pass 10.99.101.4:1521;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、nginx优化"><a href="#2、nginx优化" class="headerlink" title="2、nginx优化"></a>2、nginx优化</h3><blockquote><p>nginx的worker_processes参数<br>来源： <a href="http://bbs.linuxtone.org/thread-1062-1-1.html" target="_blank" rel="noopener">http://bbs.linuxtone.org/thread-1062-1-1.html</a><br>分享一：<br>搜索到原作者的话：<br>As a general rule you need the only worker with large number of<br>worker_connections, say 10,000 or 20,000.<br>However, if nginx does CPU-intensive work as SSL or gzipping and<br>you have 2 or more CPU, then you may set worker_processes to be equal<br>to CPU number.<br>Besides, if you serve many static files and the total size of the files<br>is bigger than memory, then you may increase worker_processes to<br>utilize a full disk bandwidth.<br>Igor Sysoev</p><p>一般一个进程足够了，你可以把连接数设得很大。<br>如果有SSL、gzip这些比较消耗CPU的工作，而且是多核CPU的话，可以设为和CPU的数量一样。<br>或者要处理很多很多的小文件，而且文件总大小比内存大很多的时候，也可以把进程数增加，<br>以充分利用IO带宽（主要似乎是IO操作有block）。</p><p>根据我配置实践，<br>服务器是“多个CPU＋gzip+网站总文件大小大于内存”的环境，worker_processes设置为CPU个数的两倍比较好。</p><p>分享二：<br>最近PPC经常出现502错误，网页经常无法打开，所以本人决定对Nginx进行深入折腾！<br>Nginx本身没有挂掉，否则不会出现502的错误信息，所以原因一定在Nginx的设置上。</p><p>经过我查阅资料和测试，发现有可能是worker_processes的参数设置不当引起的。</p><p>worker_processes默认情况下为1，一般情况下不用修改，但考虑到实际情况，可以修改这个数值，以提高性能;<br>官方的建议是修改成CPU的内核数，这里引用一段翻译过的文章：<br>worker_processes指明了nginx要开启的进程数，<br>据官方说法，一般开一个就够了，多开几个，可以减少机器io带来的影响。</p><p>据实践表明，nginx的这个参数在一般情况下开4个或8个就可以了，再往上开的话优化不太大。<br>据另一种说法是，nginx开启太多的进程，会影响主进程调度，所以占用的cpu会增高。<br>经过我测试发现，<br>这个数字是不能乱设置的，如果网站没有出现io性能问题，最好不要修改，采用默认的1即可，<br>如果非要设置，必须要和CPU的内核数匹配，否则要么就假死（主要是Windows），要么就出现502的错误（主要是Linux）。</p><p>我的电脑是双核的，按理说应该是2，但是实际上应该是4，因为是双线程的。测试结果如下：<br>1、worker_processes为1，线程打开2个，有一个是主线程，运行很稳定。<br>2、worker_processes为2，线程打开3个，有一个是主线程，1分钟左右挂掉<br>  （假死，无法打开网页，浏览器一直处于载入中）。<br>3、worker_processes为4，线程打开5个，有一个是主线程，运行很稳定。<br>4、worker_processes为8，线程打开9个，有一个是主线程，和2一样，1分钟左右挂掉。</p><p>配置参考<br>配置1：<br>4 CPU (4 Core) + 4 worker_processes (每个worker_processes 使用1个CPU)<br>[<a href="mailto:reistlin@reistlin.com" target="_blank" rel="noopener">reistlin@reistlin.com</a> ~]$ cat /proc/cpuinfo | grep processor<br>processor : 0<br>processor : 1<br>processor : 2<br>processor : 3</p><p>worker_processes 4;<br>worker_cpu_affinity 0001 0010 0100 1000;</p><p>配置2：<br>​8 CPU (8 Core) + 8 worker_processes (每个worker_processes 使用1个CPU)<br>[<a href="mailto:reistlin@reistlin.com" target="_blank" rel="noopener">reistlin@reistlin.com</a> ~]$ cat /proc/cpuinfo | grep processor<br>processor : 0<br>processor : 1<br>processor : 2<br>processor : 3<br>processor : 4<br>processor : 5<br>processor : 6<br>processor : 7</p><p>worker_processes 8;<br>worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;</p><p>配置3：<br>​16 CPU (16 Core) + 16 worker_processes (每个worker_processes 使用1个CPU)<br>[<a href="mailto:reistlin@reistlin.com" target="_blank" rel="noopener">reistlin@reistlin.com</a> ~]$ cat /proc/cpuinfo | grep processor<br>processor : 0<br>processor : 1<br>processor : 2<br>processor : 3<br>processor : 4<br>processor : 5<br>processor : 6<br>processor : 7<br>processor : 8<br>processor : 9<br>processor : 10<br>processor : 11<br>processor : 12<br>processor : 13<br>processor : 14<br>processor : 15</p><p>worker_processes 16;<br>worker_cpu_affinity<br>0000000000000001 0000000000000010 0000000000000100 0000000000001000 0000000000010000 0000000000100000 0000000001000000 0000000010000000 0000000100000000 0000001000000000 0000010000000000 0000100000000000 0001000000000000 0010000000000000 0100000000000000 1000000000000000;</p><p>Nginx worker_cpu_affinity 设置<br>根据 Nginx Wiki 上的资料显示：<br>worker_cpu_affinity<br>Syntax: worker_cpu_affinity cpumask [cpumask…]<br>Default: none<br>Linux only.<br>With this option you can bind the worker process to a CPU, it calls sched_setaffinity().</p><p>For example,<br>worker_processes 4; worker_cpu_affinity 0001 0010 0100 1000;<br>Bind each worker process to one CPU only.<br>worker_processes 2; worker_cpu_affinity 0101 1010;<br>Bind the first worker to CPU0/CPU2, bind the second worker to CPU1/CPU3. This is suitable for HTT.</p><p>worker_cpu_affinity 默认是没有开启的，<br>根据例子我们可以看得出，0001 0010 0100 1000 分别代表第1、2、3、4个逻辑CPU，<br>所以我们可以设置0010 0100 1000来将3个进程分别绑定到第2、3、4个逻辑CPU上：<br>worker_processes 3;<br>worker_cpu_affinity 0010 0100 1000;<br>同时根据例子我们也可以看出，<br>worker_cpu_affinity 可以将同1个进程绑定在2个逻辑CPU上：</p><p>worker_processes 2;<br>worker_cpu_affinity 0101 1010;<br>0101也就是第1、3个逻辑CPU上，1010就是第2、4个逻辑CPU上。 </p><p>分享三：<br>worker_processes指明了nginx要开启的进程数，<br>据官方说法，一般开一个就够了，多开几个，可以减少机器io带来的影响。</p><p>据实践表明，nginx的这个参数在一般情况下开4个或8个就可以了，再往上开的话优化不太大。<br>据另一种说法是，nginx开启太多的进程，会影响主进程调度，所以占用的cpu会增高，<br>这个说法我个人没有证实，估计他们是开了一两百个进程来对比的吧。</p><p>worker_processes配置的一些注意事项：</p><p>1、worker_cpu_affinity配置最好是能写上<br>我这里服务器多数是双核超线程，相当于4cpu，我一般开8进程，所以这个配置就是这样：<br>worker_cpu_affinity 0001 0100 1000 0010 0001 0100 1000 0010;</p><p>另，worker_cpu_affinity不是什么时候都能用的，<br>我没有认真研究并罗列所有情况，只知道2.4内核的机器用不了，<br>如果用不了的话，那么最好是加大worker_processes进程数，这样分配cpu就会平均一点啦，<br>如果不平均只好多重启几下。</p><p>2、worker_rlimit_nofile配置要和系统的单进程打开文件数一致，千万不要再画蛇添足地除以worker_processes。<br>我现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</p><p>这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，<br>总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。<br>通过 ps -elf | grep nginx 找到 nginx 的worker进程ID<br>通过 cat /proc/31613/limits 查看，其中2291是worker进程ID，请注意其中的Max open files</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、配置讲解&quot;&gt;&lt;a href=&quot;#1、配置讲解&quot; class=&quot;headerlink&quot; title=&quot;1、配置讲解&quot;&gt;&lt;/a&gt;1、配置讲解&lt;/h3&gt; &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="技术" scheme="http://caixw.cn/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>linux服务器配置安装之后处理</title>
    <link href="http://caixw.cn/2020/04/29/20200429/"/>
    <id>http://caixw.cn/2020/04/29/20200429/</id>
    <published>2020-04-29T09:54:38.000Z</published>
    <updated>2020-05-08T11:48:28.510Z</updated>
    
    <content type="html"><![CDATA[<p>一、设置文件句柄数和最大IO数量</p><p>在Linux中，您可以更改打开文件的最大数量。您可以使用ulimit命令修改此数字。它授予您控制shell启动的资源或由其启动的进程的能力。</p><p>另请参阅： 按用户级别设置Linux运行进程限制</p><p>在这个简短的教程中，我们将向您展示如何检查打开文件和文件描述的当前限制，但为此，您需要具有对系统的root访问权限。</p><p>首先，让我们看看我们如何找到Linux系统上打开的文件描述符的最大数量。</p><p>查找Linux打开文件限制<br>该值存储在：</p><p>[root@localhost ~]# cat /proc/sys/fs/file-max </p><p>483438</p><p>您将看到的数字显示用户每次登录会话可以打开的文件数。结果可能会因系统而异。</p><p>例如，在我的CentOS服务器上，限制设置为483438，而在我在家运行的Ubuntu服务器上，默认限制设置为176772。</p><p>如果要查看硬限制和软限制，可以使用以下命令：</p><p>检查Linux中的硬限制<br>[root@localhost ~]# ulimit -Hn</p><p>65536</p><p>检查Linux中的软限制</p><p>[root@localhost ~]# ulimit -Sn</p><p>65536</p><p>要查看不同用户的硬值和软值，您只需将用户“su”切换到限制您要检查的用户即可。</p><p>例如：</p><p>[root@localhost ~]# su - smgadmin</p><p>上一次登录：五 7月 26 22:21:47 CST 2019pts/0 上</p><p>[smgadmin@localhost ~]$ ulimit -Sn</p><p>65536</p><p>[smgadmin@localhost ~]$ ulimit -Hn</p><p>65536</p><p>如果需要永久设置，必须在~/.bash_profile 添加 ulimit  -HSn 2048</p><p>如何在Linux中检查系统范围的文件描述符限制<br>如果您正在运行服务器，则某些应用程序可能需要更高的打开文件描述符限制。一个很好的例子是MySQL / MariaDB服务或Apache Web服务器。</p><p>您可以通过编辑内核指令来增加Linux中打开文件的限制  fs.file-max。为此，您可以使用sysctl实用程序。</p><p>Sysctl用于在运行时配置内核参数。</p><p>例如，要将打开文件限制增加到  500000，可以以root身份使用以下命令：</p><p>[root@localhost ~]# sysctl -w fs.file-max=500000</p><p>fs.file-max = 500000</p><p>您可以使用以下命令检查已打开文件的当前值：</p><p>[root@localhost ~]# cat /proc/sys/fs/file-max </p><p>500000</p><p>使用上述命令，您所做的更改将仅在下次重新引导之前保持活动状态。如果您希望永久应用它们，则必须编辑以下文件：</p><p>[root@localhost ~]# vi /etc/sysctl.conf</p><p>添加以下行：</p><p>fs.file-MAX = 500000</p><p>当然，您可以根据需要更改数量。要再次验证更改，请使用：</p><p>cat /proc/sys/fs/file-max</p><p>用户需要注销并再次登录才能使更改生效。如果要立即应用限制，可以使用以下命令：</p><p>sysctl -p</p><p>在Linux中设置用户级别打开文件限制<br>上面的示例显示了如何设置全局限制，但您可能希望对每个用户应用限制。为此，作为root用户，您需要编辑以下文件：</p><p>[root@localhost ~]# vi /etc/security/limits.conf</p><p>如果您是Linux管理员，我建议您熟悉该文件以及您可以对其执行的操作。阅读其中的所有注释，因为它通过限制不同级别的用户/组来提供管理系统资源方面的极大灵活性。</p><p>您应添加的行采用以下参数：</p><p><domain> <type> <item> <value></value></item></type></domain></p><p>以下是为用户smgadmin设置软硬限制的示例：</p><p>##最大打开文件的硬限制示例</p><ul><li>hard nofile 65536</li></ul><p>##最大打开文件的软限制示例</p><ul><li>soft nofile 65536</li></ul><p>最后的想法<br>这篇简短的文章向您展示了如何检查和配置最大打开文件数的全局和用户级别限制的基本示例。</p><p>虽然我们只是略微表面，但我强烈建议您对/etc/sysctl.conf和/etc/security/limits.conf进行更详细的介绍和阅读，并学习如何使用它们。总有一天他们会对你有很大的帮助。</p><p>二、 关闭selinux </p><p>临时关闭 setenforce 0<br>永久关闭  vim /etc/selinux/config 设置 SELINUX=DISABLED</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、设置文件句柄数和最大IO数量&lt;/p&gt;
&lt;p&gt;在Linux中，您可以更改打开文件的最大数量。您可以使用ulimit命令修改此数字。它授予您控制shell启动的资源或由其启动的进程的能力。&lt;/p&gt;
&lt;p&gt;另请参阅： 按用户级别设置Linux运行进程限制&lt;/p&gt;
&lt;p&gt;在这个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>遇到的问题</title>
    <link href="http://caixw.cn/2020/04/02/2020040201/"/>
    <id>http://caixw.cn/2020/04/02/2020040201/</id>
    <published>2020-04-02T04:31:46.000Z</published>
    <updated>2020-04-23T06:05:09.574Z</updated>
    
    <content type="html"><![CDATA[<p>crontab运行中时间不对的问题<br>more /var/log/cron 查看日志<br>执行如下命令操作：</p><p>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br>service crond restart</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;crontab运行中时间不对的问题&lt;br&gt;more /var/log/cron 查看日志&lt;br&gt;执行如下命令操作：&lt;/p&gt;
&lt;p&gt;cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;br&gt;service crond res
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用命令使用</title>
    <link href="http://caixw.cn/2020/03/30/2020033001/"/>
    <id>http://caixw.cn/2020/03/30/2020033001/</id>
    <published>2020-03-30T01:21:37.000Z</published>
    <updated>2020-03-30T01:52:35.549Z</updated>
    
    <content type="html"><![CDATA[<p>关闭redis 的方法<br>（1）ps -ef |grep redis-server 获取进程， kill -9 pid<br>（2）cd /var/run/**.pid  找到对应的进程号，kill<br>（3）redis-cli shutdown</p><p>关闭mysql的方法</p><p>mysql.server stop</p><p>操作 zkServer 的方法</p><p>zkServer status 查看zookeeper</p><p>zkServer start  启动zookeeper</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关闭redis 的方法&lt;br&gt;（1）ps -ef |grep redis-server 获取进程， kill -9 pid&lt;br&gt;（2）cd /var/run/**.pid  找到对应的进程号，kill&lt;br&gt;（3）redis-cli shutdown&lt;/p&gt;
&lt;p&gt;关闭m
      
    
    </summary>
    
    
      <category term="技术珠玑" scheme="http://caixw.cn/tags/%E6%8A%80%E6%9C%AF%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title>转傅盛演讲《为什么我们要不顾一切的努力》</title>
    <link href="http://caixw.cn/2020/03/24/2020032401/"/>
    <id>http://caixw.cn/2020/03/24/2020032401/</id>
    <published>2020-03-24T13:53:39.000Z</published>
    <updated>2020-03-24T13:56:07.067Z</updated>
    
    <content type="html"><![CDATA[<p>关于攀比：</p><p>　　要像孩子一样回到初心</p><p>　　我是一个好强的人，看着股价跌落，内心其实是崩溃的。每次我见了同等收入公司的CEO，一跟他们算，我们的收入和有的上市公司一样高，甚至增长率比他们还要高，他们有的还亏了好几个亿，我们挣好几个亿，但股价却是我的几倍，为什么呢？</p><p>　　再后来，我就问分析师。为什么呢？你们给的估值很不公平。完全应该是40亿美金以上。我的目标价怎么只有20块呢？</p><p>　　我们发布了四次财报。每次都超出预期。每次发财报当天都跌。就像一个孩子，他把答案认真地写上去了，却给你打了个零分。真是不公平。</p><p>　　后来，我终于知道了，那是因为你想攀比。你想要变得不一样，然后你要找一个尺度。</p><p>　　但是，这个尺度是真的对吗？</p><p>　　去年我去西雅图，和刘强东同坐一个飞机。我不能想象，他在十几年前只是一个小卖部的店主。他说，我就是觉得京东，要成为互联网后面的基础设施，用很低的毛利，让整个互联网购物大大提升。只要这个行业在增长，我们就可以增长。其他事情我也不想做。</p><p>　　听完这句话，我就觉得，他是一个目标感很强的人。后来，我终于知道，一家公司是有使命和边界的，它不应该去做所有的事情，也不应该完全被别人制定的规则所束缚。</p><p>　　有一次，我的同事送了我一张老狼的演唱会门票。坐在台下，我就想，真的应该去做让自己内心觉得快乐的事情，才是最重要的事情。一个孩子摔跤了、哭了、闹了，第二天照样开开心心，继续跟你玩儿，没有任何心理阴影。可能最快乐的事情，就是回到所谓孩子一样的初心，对所有的事情保持孩子般的好奇，面对未来的困难虽然恐惧，但可以忘掉它，然后抹一把鼻涕，抹一把眼泪继续往前走。</p><p>　　关于努力：</p><p>　　像航海一样探知这个世界</p><p>　　回到开篇，为什么我要不顾一切地努力？</p><p>　　因为我终于知道所有的努力，都是让你知道这个世界本来的样子。你只有真正努力过，你才知道这个世界长什么样。你才知道这个世界是怎样真实的存在。</p><p>　　我读《乔布斯传》，让我最感动的一个事情，就是当他生命快结束的时候，他还在坚持上班，为什么？他一定不是为了攀比，不是为了金钱。即便只有一点点时间在这个世界上，他还希望更好地了解这个世界。</p><p>　　航海不就是一个在探知世界的过程吗？我们的人生不也是在体会这个世界的过程中吗？你所有的努力不就是为了让自己比别人更真切地知道这些东西吗？而且越是这样的努力，越是经历了很多痛苦，你会终于发现——这个世界不完美，但很美好。</p><p>　　《平凡的世界》里面有一段，孙少平从他村子里出来去了煤矿，每天都特别努力。后来村里的老头就来找他说，不要这样了，回村吧，娶个老婆，生个孩子，盖个房子，挺好的。他说了一句话——我不能让我的一辈子就像村口那些老头一样，每天吹嘘的都只是，年轻的时候能多吃几碗饭，因为他们只有这些可以去回忆了。</p><p>　　当我真正想清楚这些点的时候，我才知道，虽然我们有过恐惧，我们有过委屈，但总有一天，我要证明给你们看——你们都是错的。</p><p>　　到了今天，对错都不重要了。因为他们跟我的世界已经离得越来越远了。虽然一度在上市这一年里，我觉得自己比上市前还辛苦，我每天都在想为什么。可是反过来，这些东西却在督促着我的努力。</p><p>　　后来我终于知道，我能走到今天，猎豹能走到今天，真的是因为，我们想去发现人生当中的那些美好的东西。</p><p>　　有一天我跟徐鸣哥哥喝多了，他说：傅盛，你说什么是爱？</p><p>　　我没多想，蹦出来一句话——爱就是不顾一切。</p><p>　　徐鸣大饮三杯，哈哈大笑，然后就倒下去了……</p><p>　　也是那一刻，我突然明白，我为什么要不顾一切地努力？</p><p>　　因为——我爱这个世界；</p><p>　　因为——它真的很美好；</p><p>　　因为——我可以和你们一起去看最美的风景。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于攀比：&lt;/p&gt;
&lt;p&gt;　　要像孩子一样回到初心&lt;/p&gt;
&lt;p&gt;　　我是一个好强的人，看着股价跌落，内心其实是崩溃的。每次我见了同等收入公司的CEO，一跟他们算，我们的收入和有的上市公司一样高，甚至增长率比他们还要高，他们有的还亏了好几个亿，我们挣好几个亿，但股价却是我的
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://caixw.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>nginx的proxy_temp目录权限问题</title>
    <link href="http://caixw.cn/2020/03/19/20200319/"/>
    <id>http://caixw.cn/2020/03/19/20200319/</id>
    <published>2020-03-19T14:20:12.000Z</published>
    <updated>2020-03-19T14:31:38.806Z</updated>
    
    <content type="html"><![CDATA[<p>且看下面是我这MYPM配的nginx反向代理</p><pre><code>location /iot {        root /home/mypmcc/mypm20100914;                   index  index.jhtml index.html login_page.jhtml;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header   Host $host;        proxy_pass http://127.0.0.1:8080;        client_max_body_size     100m;        client_body_buffer_size  128k;        proxy_connect_timeout    600;        proxy_read_timeout       600;        proxy_send_timeout       6000;        proxy_buffer_size        32k;        proxy_buffers            4 64k;        proxy_busy_buffers_size 128k;        proxy_temp_file_write_size 512k;      }</code></pre><p>   nginx 反向代理参数说明</p><pre><code>proxy_connect_timeout 600;              #nginx跟后端服务器连接超时时间(代理连接超时)proxy_read_timeout    600;              #连接成功后，后端服务器响应时间(代理接收超时)proxy_send_timeout    600;              #后端服务器数据回传时间(代理发送超时)proxy_buffer_size     32k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小proxy_buffers         4 32k;            #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置proxy_busy_buffers_size  64k;           #高负荷下缓冲大小（proxy_buffers*2）proxy_temp_file_write_size  64k;      #设定缓存文件夹大小，大于这个值，将从upstream服务器传</code></pre><p>   问题就出在proxy_temp_file_write_size上，当你的文件超过该参数设置的大小时，nginx会先将文件写入临时目录(缺省为nginx安装目下/proxy_temp目录),缺省nginx是以nobody身份启动的，用ls -al 命令查看proxy_temp目录 nobody是proxy_temp目录的所有者，怪了那为什么没权限呢，接下来我查看proxy_temp的父目录既nginx安装目录。发现nobody竞然没权限，怪不得会出上面的问题然后设置任何人都可以写 proxy_temp目录，再重启示nginx解决;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;且看下面是我这MYPM配的nginx反向代理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location /iot {
        root /home/mypmcc/mypm20100914;           
        index  index.jhtml index
      
    
    </summary>
    
    
      <category term="技术珠玑" scheme="http://caixw.cn/tags/%E6%8A%80%E6%9C%AF%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title>springcloud之feign详解</title>
    <link href="http://caixw.cn/2020/03/14/2020031402/"/>
    <id>http://caixw.cn/2020/03/14/2020031402/</id>
    <published>2020-03-14T06:57:23.000Z</published>
    <updated>2020-03-16T01:03:46.835Z</updated>
    
    <content type="html"><![CDATA[<p>1、通过RestTemplate 使用服务名来调用服务，爆出UNKOWN SERVER</p><p>可以通过在RestTemplate 的bean中加入@LoadBalanced,默认就是Robbin负载的。</p><p>在SpringCloud中,有两种调用服务时客户端的负载均衡策略,一个是Ribbon,一个是Feign;</p><p>(1)Ribbon是一个基于Http端的负载均衡,通过在Configuration中配置RestTemplate来进行调用,可以自定义负载均衡的方式。</p><p>(2)Feign是一个通过本地接口的形式来进行调用服务的,其中Feign中默认引入了Ribbon,在线上开发中,我还是比较倾向用Feign，因为Feign中以接口的形式进行调用服务,看起来简洁,而且Feign中还可以增加熔断器,来进行服务的熔断和降级,防止服务调用中的服务的雪崩</p><p>2、Feign的日志配置<br>（1）在application.yml</p><pre><code>logging.level.xxx.xxx.xxxClient=DEBUG;</code></pre><p> (2) 需要配置Level bean</p><pre><code>  @Beanpublic Logger.Level feignLevel() {    return Logger.Level.FULL;}</code></pre><p>(3) 配置文件需要指定httpClient</p><pre><code>feign:httpclient:  enabled: true</code></pre><p>3、使用日志最好的方式<br>   lombok的@Slf4j注解后，直接log.info就ok了 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、通过RestTemplate 使用服务名来调用服务，爆出UNKOWN SERVER&lt;/p&gt;
&lt;p&gt;可以通过在RestTemplate 的bean中加入@LoadBalanced,默认就是Robbin负载的。&lt;/p&gt;
&lt;p&gt;在SpringCloud中,有两种调用服务时客户
      
    
    </summary>
    
    
      <category term="技术珠玑" scheme="http://caixw.cn/tags/%E6%8A%80%E6%9C%AF%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title>linux遇到的问题总结</title>
    <link href="http://caixw.cn/2020/03/14/2020031401/"/>
    <id>http://caixw.cn/2020/03/14/2020031401/</id>
    <published>2020-03-14T00:56:29.000Z</published>
    <updated>2020-03-14T01:30:37.374Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、解决Nginx的connect-to-127-0-0-1-8080-failed-13-Permission-denied"><a href="#1、解决Nginx的connect-to-127-0-0-1-8080-failed-13-Permission-denied" class="headerlink" title="1、解决Nginx的connect() to 127.0.0.1:8080 failed (13: Permission denied)"></a>1、解决Nginx的connect() to 127.0.0.1:8080 failed (13: Permission denied)</h3><p>  nginx 默认端口是8080，selinux安全默认是enforcing,所以关闭掉就ok了</p><h3 id="2、服务器内存占用过高的问题排查"><a href="#2、服务器内存占用过高的问题排查" class="headerlink" title="2、服务器内存占用过高的问题排查"></a>2、服务器内存占用过高的问题排查</h3><p>   (1).用top 命令查看占用资源最多PID(进程)：<br>   (2).再用 top -H -p  1000 命令查看在这个进程中，消耗 cpu 最多 的线程，如 1003；<br>   (3).最后使用 jstack 1000 &gt; dump_file 把这个进程的堆栈信息 dump 到文件中，<br>   (4).打开 dump_file，找到 id 为1003的线程（要转化为16进制），就能发现是哪个方法占用了 cpu，分析自己的    代码;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、解决Nginx的connect-to-127-0-0-1-8080-failed-13-Permission-denied&quot;&gt;&lt;a href=&quot;#1、解决Nginx的connect-to-127-0-0-1-8080-failed-13-Permission-
      
    
    </summary>
    
    
      <category term="技术珠玑" scheme="http://caixw.cn/tags/%E6%8A%80%E6%9C%AF%E7%8F%A0%E7%8E%91/"/>
    
  </entry>
  
  <entry>
    <title>To B Not to B</title>
    <link href="http://caixw.cn/2020/02/22/20200222/"/>
    <id>http://caixw.cn/2020/02/22/20200222/</id>
    <published>2020-02-22T05:54:33.000Z</published>
    <updated>2020-02-22T06:03:39.869Z</updated>
    
    <content type="html"><![CDATA[<p>互联网浪潮正从过去的消费互联网向产业互联网转移，巨头们正在把“矛头”从C(消费者)端转向B(企业)端，他们希望越来越多的企业接入互联网，进行数字化和智能化改造，最终打造一个万物互联的新世界。</p><p>在兴奋与焦虑杂糅交错下，“下半场”正在成为传统互联网圈的核心话题。</p><p>传统互联网的上半场只是一场关于“消费互联网”的竞争，C（即Costumer，消费者）端的个人用户是巨头们争夺的核心目标，他们希望把每个人的生活线上化、数据化。于是，人们开始用手机买机票、打车、订酒店、聊天、购物、看新闻……而百度、腾讯、阿里等公司一跃成为巨头公司。</p><p>到了下半场，风口开始转向“产业互联网”，各行各业的企业(B端，即Business企业)成了传统互联网巨头们跑马圈地的对象。巨头们以科技赋能的名义，希望帮助企业进行业务模式、运营模式和商业模式的数字化、智能化变革。</p><p>制造、金融、医疗、汽车、物流、通信、交通、城市管理、政府服务……似乎每一个领域都是“想想就很激动”的万亿级市场。</p><p>“To B or Not to B”，正成为传统互联网巨头们的一个新命题。</p><p>市场的诱惑，BAT也要转型</p><p>其实，产业互联网并不是一个新鲜词。国内产业互联网领域早已聚集了一批先行者，如海尔、航天科工、三一重工、东土科技、和利时等等。工信部也早在2016年初就成立了工业互联网产业联盟。国际市场上，也有GE、西门子等先行者。这些国内外产业互联网先行者的技术和方案早已广泛应用于制造业、城市管理、医疗等诸多领域。</p><p>但对于最早起步于消费领域的传统互联网巨头们来说，产业互联网却是一片新的待开拓的疆土。</p><p>10月23日，腾讯公司掌舵者马化腾在知乎上提出了这样一个问题：未来10年哪些基础科学的突破会影响互联网产业？产业互联网和科技互联网融合创新，会带来哪些改变？此时距离马化腾上一次在知乎上提问已经过去6年，6年前他提出的问题是：整个人类处于互联网发展的哪个阶段?下一个10年，互联网升级的大致方向在哪里?</p><p>而在此之前的9月30日，即将迎来20周岁生日的腾讯宣布启动新一轮整体战略升级，并因此进行了一轮力度空前的业务架构调整。“扎根消费互联网、拥抱产业互联网”是此次调整的核心目标。</p><p>对此，马化腾表示，此次主动革新是腾讯迈向下一个20年的新起点。“这是一次非常重要的战略升级，互联网的下半场属于产业互联网，上半场，腾讯通过连接为用户提供优质服务，下半场我们将在此基础上，助力产业与消费者形成更具开放性的新型连接生态。”</p><p>不过，关于腾讯的此番大动作，更多的讨论来自——to B的时代是否来临？产业互联网浪潮真的已至？互联网下半场格局会如何变幻？其实，此前，这已经是科技圈和投资圈非常热门的话题。只不过，腾讯的高调入局，将这股潮流一下子推到更多人面前。</p><p>趋势未至，风投先行。我们之前曾报道过，很多投资机构已经开始重点关注to B类型的创业公司，尤其是那些真正拥有核心技术而非模式创新的创业企业。</p><p>“中国这几年一直在做‘互联网+’，这一方面是认可互联网本身发展的成果，另一方面也是希望互联网更多地去助力实体经济，成为经济发展新的驱动力。从消费互联网到‘互联网+’，再到现在的产业互联网，这其实是发展趋势。”百度云副总经理张志琦告诉我们。</p><p>事实上，中国的科技巨头们几乎都开始重估B端的价值。</p><p>“为什么大家现在都开始说要做to B？除了消费互联网结束、产业互联网开始这个讨论，更重要的是，全球产业格局已经发生了不可逆转的变化。”阿里巴巴集团副总裁刘松告诉我们。</p><p>在刘松看来，to B之所以成为热潮，一方面是移动互联网的C端人口红利释放殆尽，消费互联网的高速增长期即将过去，下一波红利将来自仍未爆发的产业互联网，而这将是一个比消费互联网大得多的巨量市场。“产业互联网的体量可能会是消费互联网的100倍。”</p><p>另一方面，随着中国经济的转型升级，越来越多的企业需要“更换引擎 ”，比如过去处于产业价值链底端的中国制造，但现在随着劳动力红利的消失和低端制造向东南亚转移，在产业价值上不断向上走的中国创造和中国智造，当然需要通过数字化转型和智能化变革来开发新的动能。</p><p>一边是在消费互联网领域蓄积了能力的互联网公司，一边是规模巨大又充满热切需求的企业，如果这两者碰撞会发生什么?</p><p>种种迹象表明，互联网浪潮正从过去的消费互联网向产业互联网转移，巨头们正在把“矛头”从C(消费者)端转向B(企业)端，他们希望越来越多的企业接入互联网，进行数字化和智能化改造，最终打造一个万物互联的新世界。</p><p>产业互联网的规模有多大?</p><p>根据普华永道发布的《科技赋能B端新趋势白皮书》预计，到2025年，T2B2C(编者注：T指科技，B指商家，C指用户)模式给科技企业带来的整体市值将高达40至50万亿元人民币。而中国移动互联网2018年的市场规模仅为8.42万亿元。咨询机构IDC的一项CEO调查也显示，在中国1000强企业中，有超过一半的企业已把数字化转型作为企业的战略核心，这为市场带来了巨大的想象空间。</p><p>从颠覆到赋能</p><p>“在互联网的上半场，互联网身上最显著的标签就是颠覆者，主角似乎都是互联网公司。但是到了下半场，互联网公司的角色会变为赋能者，主角则是传统企业，尤其是各个行业里的领军者，他们把行业经验和实践叠加到互联网的技术和能力之上，通过完成数字化转型和智能化变革，形成新的核心竞争力。”张志琦表示。</p><p>无论是阿里、腾讯、百度，还是华为、金山、浪潮，征战数字化转型和智能化变革市场的先锋，都是云业务。</p><p>因为“云是数字经济最重要的基础设施”“云形态的数据中心会超越传统数据中心”“云将成为人工智能的最强载体”……无论是定义未来的人工智能，还是万物互联的IoT，抑或是未来石油的大数据，都要基于云去发展演进。“产业互联网也好，数字经济也好，智能化也好，底座都是云。”刘松表示。</p><p>“要实现数字化转型，传统企业的核心要点是在云上完成这次数字化的产业升级。”毕马威中国信息化咨询主管黄灏告诉我们，“过去10年，云服务商创造了很多企业数字化转型的成功案例，这将会激发整个行业对数字化和智能化的再认识。”</p><p>“未来10年，中国传统大型企业将借助云，不断挖掘自身的潜能，向产业链的高端进发，实现自我超越，并在国际市场与对手展开更高层次的竞争，进而为中国下一个10年发展提供持续动能。”黄灏说。</p><p>据分析机构Gartner的统计数据，到2020年，通过5G网络相互连接的智能设备将达到500亿台IoT设备和77亿人，这将驱动大数据、云、人工智能、IoT、边缘计算等产业的普及和爆发。</p><p>to B有多难?</p><p>从历史上看，信息技术对B端企业的变革经历了两次浪潮。第一次是在上世纪70年代，以信息化和软件化为核心，诞生了SAP、微软、甲骨文等一批软件巨头。第二次是2000年左右，云计算兴起，企业开始纷纷上云，大数据、IoT（物联网）、人工智能开始与企业的业务深度结合，SaaS(软件即服务)模式大行其道。</p><p>“为什么中国的to B企业都活得这么惨？”美团点评创始人王兴曾经撰文提出了这个“很奇怪”的问题，并随后引发了热议。</p><p>王兴认为，中国科技公司往往被认为是把美国公司Copy to China，几乎每个领域的美国龙头企业都在中国有拥趸。但是，在to B领域，SAP、Salesforce、Workday，Oracle这些非常成功的公司，却没有做起来的中国版本，甚至都没有人去做。to B公司在美国占据了整个科技产业的半壁江山，中国科技圈却基本找不到，即使有活着的，也都活得很惨。</p><p>王兴认为，这背后深层次的原因是“成也人口、败也人口”。中国庞大的人口基数导致在中国做消费互联网，轻松就可以获得几千万甚至几个亿的用户;但是，也正因为人口众多，劳动力相对廉价，中国企业缺乏以技术提升效率的迫切需求，因此中国此前工业的信息化的紧迫性远不及人力成本高昂的欧美。</p><p>“过去，中国在国际分工里基本上在产业价值链的底端，它并不需要在知识和能力创造方面花太多的时间和成本。说得直白一点，美国、德国企业是头脑国，而中国的企业是躯干国。头脑国肯定需要花更多的钱去构建能力，所以欧美出现了一大批to B的大公司。而中国企业过去根本用不到，信息化也只是人财物管好就可以了，不用搞科技创新。企业不肯投钱，当然就养不大to B的公司。”刘松说。</p><p>B端市场——难啃的硬骨头</p><p>刘松透露，阿里很早就想做to B业务，阿里云的前身其实就是阿里软件，但在2008年就失败了。“当时因为产业条件还不具备，没有今天消费互联网形成的大的技术环境和平台，生不逢时。2009年，阿里决定做云计算，从小B开始，2014年以后开始做大B，就是所谓数字化转型这个概念。”</p><p>但是，即使现在潮头已至，仍然不能说坦途一片。刘松和张志琦都坦言，在业务推进中，在与传统企业的沟通合作中，还有很多障碍和误解需要破除。</p><p>“一方面，就像10年前做电商一样，很多企业都在观望，因为有太多的不确定性，比如到底能不能最终受益。另一方面，电商是互联网比较上层的应用，还比较好理解，但大数据、人工智能都是技术门槛非常高的，要复杂得多。现在有很多企业的领导把智能化写进企业的战略甚至价值观里面，但是当真的要落地的时候，就感觉很难。这种不了解也会导致客户把科技想得太科幻，很多时候，他们把人工智能等同于科幻。”张志琦说。</p><p>“互联网与产业的跨界合作，最难的也是最重要的就是建立信任。阿里之前用过资本的形式，通过利益共享来建立信任。但其实，应该有多种形式，不完全是一定要有资本。”刘松说。</p><p>刘松还特别强调消费互联网是产业互联网的前奏，两者并不是取代关系。“C端市场为B端市场培养了用户，沉淀了技术。未来C端和B端会进一步打通，比如C2M模式、淘工厂都是在做这样的事情。”腾讯公司相关负责人也对我们表示，在帮助传统企业数字化、智能化转型中，确实会遇到很多障碍和难题，最突出的就是观念上。</p><p>“数字化、智能化转型并不是一蹴而就的。数字驱动不仅仅是IT问题，不是只是用信息技术支撑企业业务发展，而是企业的战略问题，涉及到企业核心能力的重构。要推进企业在战略层面和业务层面的动力转型和创新发展，是需要换发动机的。” 腾讯公司上述负责人说。</p><p>前景美好而诱人，但也存在一定的不确定性。因为to B和to C是两个完全不同的市场，产业互联网的B端市场的难度、复杂程度、产业周期都要远远高于消费互联网的C端市场。虽然整体市场规模更大，但与经常出爆款的C端市场不同，B端市场是苦活，是个难啃的硬骨头。</p><p>BAT等巨头如何抢食新蛋糕</p><p>在产业互联网时代，不会出现赢家通吃的现象，更不会是一个巨头时代，因为每个领域都有很强的垂直专业性，不可能哪一家公司解决所有问题。</p><p>面对早已抢先一步抢占产业互联网的海尔、三一、航天科工、东土科技等工业互联网先行者，传统互联网巨头们将如何分割这一巨大蛋糕？</p><p>腾讯架构大调整</p><p>9月30日，为了“扎根消费互联网、拥抱产业互联网”，腾讯将原有的七大事业群(BG)重组整合为六大事业群。</p><p>其中最受关注的当数新成立的云与智慧产业事业群(CSIG，即Cloud and Smart Industries Group)，这意味着，腾讯董事会主席兼首席执行官马化腾屡次对外透露的腾讯对产业互联网的野心，有了新进展，它将成为腾讯to B业务的主阵地。</p><p>“一个可见的趋势是，消费互联网市场趋于稳定，市场机会正在向产业互联网迁移。腾讯的战略升级和架构调整，正是基于此进行的前瞻思考和主动进化。”腾讯CSIG相关负责人告诉我们。</p><p>据腾讯上述负责人介绍，在调整后的新组织架构中，CSIG将负责公司云平台和智能产业关联业务的发展。</p><p>在下一个智能时代，腾讯对自己新的定位是：“各行各业的数字化助手”。“腾讯希望利用云、支付、AI、安全、LBS等基础设施赋能产业合作伙伴，搭建新一代的智能产业生态。把10亿级的用户和专业的产业服务对接起来，帮助传统行业实现智能化、数字化，对用户和行业都将产生巨大的价值。”该负责人表示。</p><p>在BAT中，腾讯被业界普遍认为是最没有to B基因的，在游戏业务受挫、股价不断下跌的背景下，腾讯能否讲好这个to B的新故事?能否靠B端发力实现惊人逆转还有待观察。</p><p>作为曾经的“亚洲股王”，腾讯的股价今年以来已经从高点跌掉了四成，且跌幅要远大于阿里巴巴和百度。过度依赖游戏业务一直是外界对腾讯发展前景质疑的焦点，而占据营收近一半的游戏业务又因审批收紧而屡遭重创。尽管从公司的基本面看，腾讯依然拥有超高的增速和巨量的营收，但一些投资者表示已经看不清腾讯的未来。</p><p>张志东，曾任腾讯公司CTO，是腾讯公司主要创办人、腾讯五虎将之一，马化腾的QQ号是10001，而他的是10002。2014年，张志东退居二线，至今，腾讯仍然没有新的CTO。没有CTO、没有技术领军人物，腾讯因此颇受质疑：腾讯技术建设是否落后同体量的其他公司?</p><p>张志东在此前的一次内部分享中，曾直言腾讯存在的一些问题。</p><p>一是组织变革的滞后。为了从PC时代过渡到移动互联网时代，腾讯在2011年到2012年间进行过一次大规模的架构调整，而现在ABC(AI人工智能+Big Data大数据+Cloud云)时代已经到来，但腾讯现有的团队组织建设并没有跟上。</p><p>二是数据中台建设缺课。腾讯内部著名的“赛马机制”是腾讯提升创新力的重要手段，QQ秀、微信、《王者荣耀》等很多成功的产品都是从这个制度里跑出来的。但是，这也是一把双刃剑，会出现许多“重复发明轮子”的现象，各个部门之间常常是竞争关系大于合作关系，尤其是在大数据的应用上，会带来很重的数据墙和组织墙。</p><p>“这二者互为因果，弄不好会形成恶性循环。”张志东说。</p><p>而从此次的架构调整看，腾讯也确实着重在解决这两个问题。</p><p>对于腾讯究竟有没有to B的基因?早在2017年12月，腾讯公司总裁刘炽平曾在员工大会上表示：“很多人说我们只有to C的基因，没有to B的基因，我是不相信这个说法的，你看进化中的成功物种，不是一开始就有那种基因，都是演化出来的。”</p><p>对于外界的疑虑，腾讯方面的负责人也表示，很多产业有to B和to C等综合性需求。腾讯一直在探索一套融合腾讯优势的特色打法，形成一个2C2B的智慧产业生态。</p><p>“许多关键产业最终的服务对象不也是人嘛，而腾讯在移动互联网的优势，是可以转化为B端业务的核心竞争力的。腾讯有接近11亿的庞大用户基础以及服务这些用户的积累，这些在互联网上半场储备的经验和优势，将成为我们迎战互联网下半场的利器。腾讯希望推动C和B两端更彻底地连接，并以此形成新型业务生态，这也是全球经济发展的新趋势之一。”该负责人说。</p><p>马云提出“新制造”</p><p>在2016年的云栖大会上，马云提出了以“新零售”为代表的“五新”战略。业界纷纷探讨，就像新零售重塑零售业一样，新制造会不会为制造业带来变革。</p><p>马云认为，新制造就是用好互联网、云计算、IoT、人工智能、大数据，未来制造业是Made in Internet。现在不加速变革的企业，在未来10~15年会哭天喊地。“我们提出新制造，不是阿里巴巴要进军制造业，而是要帮助制造业进行变革。”</p><p>“中国制造业如果能提升1%的良品率，就意味着一年内可以增加上万亿元的利润。”阿里云总裁胡晓明表示，希望利用人工智能技术发挥这1%的威力。</p><p>不过，对马云的新制造，学界和商界有不少质疑甚至批驳。例如娃哈哈集团创始人宗庆后、富士康集团董事长郭台铭等就认为马云的“新制造”只是一个噱头，并没有什么新意。国务院发展研究中心研究员李广乾也指出，马云提出的“新制造”并没有多少新的内容，充其量也就是对国内外制造业最新发展趋势的概括而已。</p><p>但无论如何，阿里云在产业互联网领域的布局已经开始了。</p><p>就像天猫是阿里巴巴“新零售”的基座，“新制造”的主攻手则是阿里云。阿里云于2009年9月成立。阿里云的成立最初是为了满足阿里巴巴自身业务发展的需要，经历过双11绝无仅有的数据压力考验，以及蚂蚁金服稳定性和安全性要求的磨炼，阿里云逐渐发展成为领先的云平台。</p><p>阿里巴巴2019财年Q1财报显示，云计算营收增速最快，高达93%。在总营收占比达到5%。而在过去的3年里，阿里云每个季度都以超过100%的速度在增长。阿里云因此被外界视为阿里巴巴最有前景的业务之一。</p><p>对照云计算业务对亚马逊、微软的业绩和估值的影响，微软公司CEO萨提亚·纳德拉通过“刷新”战略发力云计算，让微软完成华丽转身重回巅峰;亚马逊市值冲破万亿美元，云计算功不可没，因为亚马逊已经一多半利润都来自云计算，预计到2024年，亚马逊云业务价值将超过亚马逊的市值。</p><p>在满足自身需求的同时，阿里云也开始了对外赋能。根据阿里云公布的数据，目前，阿里云的合作伙伴数量已超过8000家，服务客户超过10万家，云市场的订单总数突破200万，合作伙伴的业务增长率达到450%。</p><p>根据市场研究机构IDC发布的报告，2017年，阿里云在公有云领域遥遥领先，占据了45.5%的市场份额;腾讯占比10.3%，位列第二;金山云、中国电信和亚马逊分列第三到五位。而在全球市场，根据全球知名市场研究机构Gartner发布的2017年度全球公有云市场分析报告，亚马逊AWS、微软Azure、阿里云位列全球公有云市场前三。</p><p>2017年，阿里云正式发布了面向特定行业的智能化解决方案——ET大脑。目前已广泛应用到工业、城市、农业等多个领域。</p><p>但这一切并不容易，很多传统企业，尤其是工业农业企业，最初并不相信云、大数据、IoT、人工智能等新一代信息技术能帮助到他们。</p><p>为了说服企业，阿里云采取了按效果付费的方式。阿里巴巴集团副总裁刘松告诉我们，“这其实有点儿像双方对赌，比如，我们帮你省了一个亿，我会有一个分成，但如果达不到目标效果，客户就不用付钱。”刘松表示，这样的模式在工业大脑里面已经有好几个成功的案例。</p><p>百度： AI to B</p><p>“All in AI”，百度是最先高调宣称全面进军人工智能的互联网巨头。而百度的“B计划”也是从AI切入的。</p><p>百度掌舵者李彦宏表示，人工智能正在从生态布局到落地加速，百度将率先吹响AI产业化号角。百度已经是全球AI应用范围最广的公司，已经在三大产业的15个行业得到应用，并在to B企业市场上取得了重大进展。</p><p>百度的AI战略目前主要落地方向有三方面：一是Apollo无人驾驶汽车生态;二是人工智能操作系统DuerOS;三是ABC云，即AI人工智能+Big Data大数据+Cloud Computing云计算。Apollo和DuerOS已经全面开放，与云业务一起构成百度的AI战略架构。相比其他巨头，百度更早表现出了对产业互联网的兴趣，并率先发布AI to B平台，百度希望借AI打一个翻身仗。</p><p>“人工智能对于B端的生态改变是非常明显的。无论是金融还是房产，无论是教育还是医疗，无论是能源还是物流等等，每一个方面，人工智能都有非常多的应用。”李彦宏说。</p><p>实际上，百度是BAT中最有to B气质的，其大部分营收也都是来自B端。“中国80%的企业最初开始触网建站，到后来进行营销推广，都是在百度的生态体系当中。”百度云副总经理张志琦告诉我们。</p><p>在张志琦看来，从算法到算力，到AI应用的场景落地，再加上企业中间的一些实践经验，这构成了整个产业互联网布局。而百度的优势在于搜索引擎本身对于技术上的要求很高，百度已经做了大量的技术积累和沉淀。</p><p>他认为，百度云区别于其他公司的地方在于融合了AI、大数据的技术能力，再通过云的载体进行输出和赋能。能给企业带来的价值不仅只是IT成本的降低或效率的优化，而是通过智能化帮助企业提高生产效率，创造更多商业机会。</p><p>据张志琦介绍，随着百度云生态计划的加速落地，百度云目前的合作伙伴已突破1000家。</p><p>华为：“起大早，赶晚集”</p><p>相对于BAT等互联网公司，华为绝对是有to B基因的，B端的客户数量也是BAT无法匹敌的。但是，在云和AI这两件事上，华为似乎姗姗来迟，甚至有评论调侃：“都不慢半拍、慢一拍，而是慢了两拍。这非常不华为呀。”</p><p>但10月10日，华为云刷屏了。</p><p>华为公司轮值董事长徐直军在华为HC大会上“随手”掏出了华为研制的人工智能芯片，而且还是两颗：昇腾310和昇腾910。造芯片并非易事，上百亿的研发投入，数年的研发积累，先做再说，倒是很华为。</p><p>“华为的芯片已经超越目前最先进芯片——英伟达公司产品性能的两倍。”徐直军说。研制芯片不仅意味着核心竞争力的构筑，也意味着人工智能成本的大幅降低。</p><p>同时，徐直军还首次系统地对外阐述华为的AI战略,即投资基础研究、打造全栈方案、投资开放生态和人才培养、增强解决方案、提升内部效率五大发展战略。他还宣称，华为云将全面AI化，未来三年将向云计算投资10亿元。</p><p>事实上，华为在云领域算是“起了个大早，赶了个晚集”。早在2007年，华为就成立了聚焦云计算的虚拟化研究部，2011年，华为云正式成立。但直到去年，华为创始人任正非签发的一份“关于Cloud BU组织变动的通知”正式揭开了华为云业务的面纱，华为云正式成为华为的一级部门。</p><p>作为战略业务，华为云身上的担子并不轻，华为内部人士的说法是“三年赶超阿里，跻身世界云五强”。一年来，华为成为云计算产业的一匹黑马，华为云业务今年上半年收入同比增长了7倍。华为方面表示，希望2020年华为云能贡献超过100亿美元。</p><p>外界认为，华为很可能成为中国云计算产业的后来居上者，直接威胁阿里巴巴的领先地位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;互联网浪潮正从过去的消费互联网向产业互联网转移，巨头们正在把“矛头”从C(消费者)端转向B(企业)端，他们希望越来越多的企业接入互联网，进行数字化和智能化改造，最终打造一个万物互联的新世界。&lt;/p&gt;
&lt;p&gt;在兴奋与焦虑杂糅交错下，“下半场”正在成为传统互联网圈的核心话题。&lt;
      
    
    </summary>
    
    
      <category term="资讯" scheme="http://caixw.cn/tags/%E8%B5%84%E8%AE%AF/"/>
    
  </entry>
  
  <entry>
    <title>这短短的一生我们最终都会失去</title>
    <link href="http://caixw.cn/2020/02/02/20200202/"/>
    <id>http://caixw.cn/2020/02/02/20200202/</id>
    <published>2020-02-02T09:23:14.000Z</published>
    <updated>2020-02-02T10:58:33.111Z</updated>
    
    <content type="html"><![CDATA[<p>所有的一切终将逝去，人生就是一个从生到死的过程。</p><p>中间的路如何走，全凭个人选择。</p><p>我们从出生嗷嗷待哺开始，翻身，爬行，咿呀学语，蹒跚学步，尿床，摔跟头，自己吃东西，奔跑；</p><p>从幼年到童年，断奶，和小伙伴玩，打架和好，上幼儿园，上小学；</p><p>从童年到少年，学习成长，不断地学习各种知识；</p><p>从少年到青年，开始有选择的学习，了解自己的喜好，开始表现出自己独一无二的人格，学校毕业，开始工作，结婚生子，买房买车；</p><p>从青年到中年，人生已过半，有了自己的一套人生处事原则；</p><p>从中年到老年，退休了，忙了半辈子也该歇歇了，锻炼身体，培养爱好；</p><p>从老年到暮年，走不动了，看不清了，也听不见了，吃饭穿衣都费劲了，快不行了，不说了要挂了。</p><p>人的一生犹如四季轮回，春生，夏长，秋衰，冬亡。</p><p>犹如草木枯荣，犹如太阳东升西落。</p><p>人这短暂的一生，在宇宙的岁月中如白驹过隙，弹指烟消云散。</p><p>人类很渺小，生命很短暂。</p><p>但生而为人，我们有自己的想法，要活成自己想要的样子。不辜负爱，不辜负青春，不辜负生命。</p><p>这短短的一生</p><p>我们最终都会失去</p><p>你不妨大胆一些</p><p>爱一个人，攀一座山，追一个梦……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;所有的一切终将逝去，人生就是一个从生到死的过程。&lt;/p&gt;
&lt;p&gt;中间的路如何走，全凭个人选择。&lt;/p&gt;
&lt;p&gt;我们从出生嗷嗷待哺开始，翻身，爬行，咿呀学语，蹒跚学步，尿床，摔跟头，自己吃东西，奔跑；&lt;/p&gt;
&lt;p&gt;从幼年到童年，断奶，和小伙伴玩，打架和好，上幼儿园，上小学；
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://caixw.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
