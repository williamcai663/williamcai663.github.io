[{"title":"Error creating bean with name 'eurekaAutoServiceRegistration'的原因分析","date":"2019-12-28T09:17:09.000Z","path":"2019/12/28/2019122801/","text":"启动微服务的时候，突然报这个服务，错误如下： org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name ‘eurekaAutoServiceRegistration’: Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)有如下原因如下： (1) 同一个服务重复启动了；（2）端口被其他应用占用了； 解决办法：（1）参考http://www.itersblog.com/archives/29.html；（2）https://github.com/spring-cloud/spring-cloud-netflix/issues/1952#issuecomment-355487342","tags":[{"name":"技术研究","slug":"技术研究","permalink":"http://caixw.cn/tags/技术研究/"}]},{"title":"2019121601","date":"2019-12-16T03:19:41.000Z","path":"2019/12/16/2019121601/","text":"项目管理协会(PMI)定制了项目管理知识体系的图表和词汇标准；知识体系 (BOK) 包括已发布和未发布的材料，这一知识体系仍在不断演变发展；本《PMBOK®指南》 收录项目管理知识体系中被普遍认可为“良好实践”的那一部分；本指南基于《项目管理标准》；本指南的范围仅限于项目管理领域，而不涉及任何项目组合、项目集和多个项目的领域；通用词汇是专业学科的基本要素。全球项目管理业界定义的最重要的价值 观是责任、尊重、公正和诚实，这是《道德与专业行为规范》的最重要的规范；项目是为创造独特的产品、服务或成果而进行的临时性工作。","tags":[{"name":"技术","slug":"技术","permalink":"http://caixw.cn/tags/技术/"}]},{"title":"https的简单使用","date":"2019-12-11T11:22:02.000Z","path":"2019/12/11/20191211/","text":"1、https与http的区别https相比http 多了一安全Security层，双方的传输通过对称加密传输；传输的数据不被窃取和篡改； 2、https的实现原理 (1) 客户向服务端发送一个空的https请求；服务端返回CA证书（包含有公钥）；（2）客户端验证CA证书的有效性，如果有效，执行下一步；（3）客户端生成一个随机数；通过公钥加密这个随机数，发送给服务端；（4）服务端通过公钥对应的私钥解密获取随机数；（5）服务端和客户端通过这个随机数的对称加密传输数据； 3、由http 切换到https (1) nginx重定向 ` server { listen 80; server_name docs.lvrui.io rewrite ^(.*)$ https://$host$1 permanent; # return 302 https://$host$request_uri; } server { listen 443 ssl; server_name docs.lvrui.io; index index.html index.htm; access_log /var/log/nginx/docs.log main; ssl on; ssl_certificate /etc/ssl/docs.20150509.cn.crt; ssl_certificate_key /etc/ssl/docs.20150509.cn.key; error_page 404 /404.html; location / { root /var/www/html/docs; } } ` （2）index刷新重定向 &lt;html&gt; &lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://docs.lvrui.io/&quot;&gt; &lt;/html&gt; server { listen 80; server_name docs.lvrui.io; location / { # 将 index.html 文件放到下面的目录下 root /var/www/html/refresh/; } } server { listen 443 ssl; server_name docs.lvrui.io; index index.html index.htm; access_log /var/log/nginx/docs.log main; ssl on; ssl_certificate /etc/ssl/docs.20150509.cn.crt; ssl_certificate_key /etc/ssl/docs.20150509.cn.key; error_page 404 /404.html; location / { root /var/www/html/docs; } }","tags":[{"name":"技术","slug":"技术","permalink":"http://caixw.cn/tags/技术/"}]},{"title":"2019120201","date":"2019-12-01T23:58:36.000Z","path":"2019/12/02/2019120201/","text":"nacos 的初探1、为什么要使用nacos(1) eureka服务从2.0开始不在维护了，后期升级和维护困难;(2) nocos支持的服务更多，包括基于DNS和基于RPC的服务，提供实时的健康检查；(3) 更适应于云服务架构，支持多租户和多环境； 2、服务发现 Dynamic Service Discovery is key to service-centric (for example microservice or cloud-native) architectures. Nacos supports both DNS-based and RPC-based (Dubbo, gRPC) service discovery, and provides real-time service health checks to prevent routing requests from being sent to unhealthy hosts or service instances. With Nacos, you can also implement circuit breakers for your services with ease. 3、服务配置Dynamic Configuration Service allows you to manage configurations in all environments in a centralized, externalized, and dynamic approach. Dynamic configuration saves you from redeploying your applications and services when configuration is updated. You can implement stateless services and achieve on-demand scaling effortlessly.","tags":[{"name":"技术","slug":"技术","permalink":"http://caixw.cn/tags/技术/"}]},{"title":"20191126","date":"2019-11-26T15:36:47.000Z","path":"2019/11/26/20191126/","text":"关于Linux的定时更新时间配置1、直接命令：crontab -e====2、vim /etc/crontab加入配置：*/1 * * * * /usr/sbin/ntpdate 0.asia.pool.ntp.org3、为了开机自启动，命令：vim /etc/rc.d/rc.local 加入以上命令","tags":[{"name":"技术","slug":"技术","permalink":"http://caixw.cn/tags/技术/"}]},{"title":"认识spring","date":"2019-11-22T03:40:31.000Z","path":"2019/11/22/2019112201/","text":"spring的发展spring 作为java服务器端开发的事实标准，有着巨大的优势，他对标的是EJB,为开发企业级应用提供一站式解决方案，核心思想是对象之间的依赖管理由容器来管理，为此其核心技术是bean 容器，ioc和aop。为了简化对spring 的使用，springboot ,它简化了配置，只需很少的处理就可以运行微服务，达到开箱即用的效果。为了更好的开发分布式应用，spring cloud应运而生，它集合了注册和发现，服务熔断和负载均衡等核心组件；万物互联等时代开始来临，Spring cloud data flow 目标是connect anything。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"diskpart的使用","date":"2019-09-03T14:17:45.000Z","path":"2019/09/03/2019090301/","text":"mount a disk to another disk&gt; diskpart &gt; list vol /*list all volume*/ &gt; select vol=3 &gt; remove &gt; assign mount=c:\\mnt /*vol=3 mount to c:\\mnt*/ remove mount&gt; diskpart &gt; list vol &gt; remove mount=c:\\mnt &gt; select vol=3 &gt; assign mount=f:","tags":[]},{"title":"springboot调度任务","date":"2019-03-24T08:39:30.000Z","path":"2019/03/24/2019032402/","text":"基于注解配置 - @EnableScheduling 开启调度 @EnableAsync 开启异步线程 public class EnvironmentTestController { /@Scheduled(cron = &quot;*/5 * * * * ?&quot;) 单位为毫秒数 @Scheduled(fixedRate = 5000) 可以设置固定间隔毫秒数 @Async 开启多个任务的时候，多个线程处理 public void printCount(){ System.out.println(Thread.currentThread().getName()); //System.out.println(&quot;Count:&quot;+Count); } } cron 表达式 Cron表达式参数分别表示： 秒（0~59） 例如0/5表示从零开始，每隔5秒分（0~59）时（0~23）日（0~31）的某天，需计算月（0~11）周几（ 可填1-7 或 SUN/MON/TUE/WED/THU/FRI/SAT）表示任意？表示不确定n/m 表示从n开始，每隔m@Scheduled：除了支持灵活的参数表达式cron之外，还支持简单的延时操作，例如 fixedDelay ，fixedRate 填写相应的毫秒数即可。每隔一分钟： 0/1 * ？","tags":[]},{"title":"jconsole 查看springboot 项目","date":"2019-03-24T01:19:11.000Z","path":"2019/03/24/2019032401/","text":"需要在启动参数里配置如下： -Dcom.sun.management.jmxremote.authenticate=”false” -Dcom.sun.management.jmxremote.ssl=”false” -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=”6017” ctrl+r启动 jconsole ,如下图所示： – 登录界面 – 登录后的面板","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"读《深入理解Java虚拟机》有感之4","date":"2019-02-20T11:50:05.000Z","path":"2019/02/20/20190220love/","text":"对象的创建 （1）虚拟机遇到new的指令时，首先从常量池查看是否有类的常量符号引用，并且检查这个符号引用代表的类是否已经加载，解析和初始化过，如果没有的话，就会启动类的加载。在类加载检查通过后，接下来虚拟机为新生的对象分配内存，分配内存的过程就是在堆中划分一块内存出来。为了加快对象的内存分配，防止指针的不安全，通常是使用TLAB（本地线程缓冲），可以使用参数-XX:+UseTLAB设置。 （2）内存分配完成后，虚拟机需要保证将分配的内存空间都设置为零值（不包括对象头），这样即使没有初始化，也可以访问数据为零值； （3）接下来要是设置对象头，对象头内容有：元数据信息，对象的哈希码，对象的GC分代年龄等信息； （4）在上面完成之后，一个新的对象产生了，但是还没有init(),所有字段值为零；初始化之后就有值； 对象的布局 对象布局可以分为3部分：对象头，实例数据和对齐填充；（1） 对象头：一个为Mark world:hash,gc年代等数据，一个为类的指针，确定这个对象为那个类型的实例；如果是数组的话，还有一个字段存储数组长度；（2）实例数据，无论是从父类继承下来的，还是在子类中定义的，都需要记录起来；这部分存储顺序收到分配策略影响，Hotspot虚拟机默认的策略是相同宽度的字段总是被分配到一起，在此基础之上父类的字段出现在子类之前； （3）对象填充并不是必然存在的，也没有特殊的含义，只是起着占位符的作用，由于HotspotVM 内存管理系统的要求对象的起始地址必须是8字节倍数；所以没有对齐的，就需要补充。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"读《深入理解Java虚拟机》有感之3","date":"2019-02-14T14:52:09.000Z","path":"2019/02/14/20190214love/","text":"虚拟机栈 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。 本地方法栈 其作用与虚拟机栈基本相似，区别是虚拟机栈为虚拟机执行java方法服务，二本地方法栈则为虚拟机使用到Native方法服务；与虚拟机方法栈一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。 Java 堆 Java堆主要为类和数组实例分配内存；如果堆是可以扩展的，如果堆中没有内存分配，并且堆也无法扩展时，将会抛出OutOfMemoryError异常； 方法区 该区又称”永久代”，主要存储已被虚拟机加载的类信息，常量，静态变量，JIT编译后的代码等数据。当方法区无法完成内存分配要求，也将抛出OutOfMemoryError异常。 运行时常量池 运行时常量池是方法区的一部分，用于存放编译期生成的各种字面量和符号引用。既然运行时常量池是方法区的一部分，自然就会收到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。 直接内存 直接内存是jvm之外的内存，受到本机内存的限制，如果分配的内存无法满足时，就会抛出OutOfMemoryError异常。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"读《深入理解Java虚拟机有感》之2","date":"2019-02-12T14:21:29.000Z","path":"2019/02/12/20190212love/","text":"java把内存的分配和回收交给了虚拟机，工程师不用自己手动释放内存，这样就带来了一个不好的事情，一旦发生内存异常和溢出，如果对jvm内存原理不够精通的话，排查问题就是一件痛苦的工作。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"读《深入理解Java虚拟机有感》之1","date":"2019-02-11T13:33:58.000Z","path":"2019/02/11/20190211love/","text":"理解java虚拟机的理由 (1) 理解jvm运行原理，可以编写高质量的代码。 (2) jvm 接管了内存，好处是可以不用担心内存释放的问题，但是出现内存泄漏的情况，就必须 深入理解jvm,才能更好的定位和解决问题。 (3) jvm 未来朝着模块化和支持多核方向发展，编写lamda函数式编程可以更好的支持多核，理解jvm 有助于知其然，知其所以然。 (4) 目前显卡的算术运算能力，并行能力已经远远超过了CPU，在图形领域以外发掘显卡的潜力是近几年计算机发展的方向之一。Java的项目Sumatra就是提供GPU和APU运算能力的工具，以后她将直接提供java语言层面的API。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"经典老歌，久听不厌","date":"2019-01-10T13:48:11.000Z","path":"2019/01/10/jingdianlaogefor20190110/","text":"","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"读《从0开始学架构》有感-开篇","date":"2018-06-24T07:50:51.000Z","path":"2018/06/24/2018062401/","text":"每个人程序员都有一个架构师梦想，但是梦想是美好的，现实却是残酷的。 架构没有想象中的简单，它有几个特性：1、架构设计的思维和程序设计的思维差异很大 架构设计的关键思维是判断和取舍，程序设计的关键思维是逻辑与实现。要从程序员转变成架构师，就必须转变思维；同理穷人和富人的思维也不同，要成为富人必须有富人的思维。 2、架构设计没有体系化的培训和训练机制 大学几乎没有架构设计的相关课程，也没有体系化的相关书籍，只能依靠自己摸索，效率低，容易采坑。 3、程序员对架构设计存在很大误区 要成为架构师必须要有很强的技术天分；架构师要有很强的创造力；架构设计必须要高大上才能体现架构师设计能力；架构一定要具备高可用、高性能…这些似似而非的误区。 通过学习《从0开始学习架构》，我可以收获： 清楚的理解架构设计的本质、概念、目的，避免架构师在实践过程中把握不住重点、分不清主次，眉毛胡子一把抓，导致架构设计的四不像。 掌握架构设计的通用原则，无论何种业务或技术，架构师在判断和选择的时候有一套方法论可以参考，避免架构设计举棋不定，或者拍脑袋式设计。 掌握标准的架构设计流程，即使是刚开始做技术架构，也能够按照架构一步一步设计出合适的架构，避免某些步骤缺失导致错误的架构设计。 深入理解已有的架构模式，做到架构特点快速挑选合适的模式完成架构设计，或者在已有的模式上进行创新，或者将已有的模式组合出新的架构。 掌握架构演进和开源系统使用的一些技巧。","tags":[]},{"title":"分库分表总结","date":"2018-06-17T02:29:37.000Z","path":"2018/06/17/201806171029/","text":"为什么要分库分表当存储数据过多，性能下降，无法满足正常的业务需求的时候，就需要将单个空间拆分成多个，分担单个个体的压力，缩短响应时间，提高性能。分库分表，顾名思义，是两个操作。分库，拆分成多个数据库，分表，拆分成多张表。常见方式有：单库单表-&gt;单库多表-&gt;多库多表。 如何进行数据拆分最简单的方式就是按照ID将数据分配到不同的库不同的表中。当你创建一条记录时，就会根据生成的ID计算这条数据放到哪个库哪张表里去。 分库分表路由规则假如有16个库（从00库到15库），每个库有64张表，那一共就是有1024张表（从0000-1023）对应的路由规则：dbRule=id%1024%64tbRule=id%1024那么对应的库为dbName_dbRule对应的表为：tbName_tbRule 常见的方式 简单ID取模 字符串hash取模 分表键的问题选择谁作为分表键，这涉及到数据库的可扩展性，是否便于查询，能够避免跨库事务等，如果数据老是落到特定的数据库表中，那就分库分表就没有意义了。这个问题没有明确的答案，必须根据实际业务来确定。建议分表键尽可能找到数据表中的数据在业务逻辑上的主体，并确定大部分的数据库围绕这个主体的数据进行。如果一个分表键无法解决，可以使用2个，尽量越少越好。 分库分表存在的问题 数据按照用户划分，就会造成跨库事务问题。 原来所有的单库单表的sql都要进行改造，加入appId分表键。 汇总分库分表的数据，要跨越多个库，是一个问题。","tags":[]},{"title":"Git的简单使用","date":"2018-06-04T14:43:16.000Z","path":"2018/06/04/20180604/","text":"###如果没有初始化的项目，可以通过以下步骤： $echo &quot;# kotlinPrimary&quot; &gt;&gt; README.md $git init $git add README.md $git commit -m &quot;first commit&quot; $git remote add origin git@github.com:williamcai663/$kotlinPrimary.git $git push -u origin master 这样就可以把项目推到库中并生成且提交到master ###如果存在一个库的项目，直接执行如下命令： $git remote add origin git@github.com:williamcai663/kotlinPrimary.git $git push -u origin master ###如果想从master上开一个develop分支，可以执行如下： $git checkout -b develop-b 的作用就是创建并切换到develop分支这个新开的分支并没有关联到远程分支，创建远程分支并提交到远程，执行 git push origin develop这样远程就有了一个分支，并且与远程的分支develop没有关联上，可以通过执行如下命令： $git branch --set-upstream-to=origin/develop develop","tags":[]},{"title":"ubuntu搭建elasticsearch和使用","date":"2018-05-06T06:53:26.000Z","path":"2018/05/06/20180506elasticsearch/","text":"參考 ：http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html","tags":[]},{"title":"elasticsearch的安裝","date":"2018-05-05T13:58:46.000Z","path":"2018/05/05/20180505elasticsearch/","text":"– 1.检查jdk安装 执行命令：java -version如果有java相关信息，说明已经安装。如果没有安装的话，执行命令：yum -y install java-1.8.0-openjdk– 2.下载elasticsearch安装包 执行命令： wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.3.4/elasticsearch-2.3.4.tar.gz – 3.解压和配置elasticsearch 解压执行：tar -zxvf elasticsearch-2.3.4.tar.gz执行：cd elasticsearch-2.3.4 &amp;&amp; cd bin &amp;&amp; ./elasticsearch执行之后，会出现问题提示： Exception in thread &quot;main&quot; java.lang.RuntimeException: don&apos;t run elasticsearch as root. at org.elasticsearch.bootstrap.Bootstrap.initializeNatives(Bootstrap.java:93) at org.elasticsearch.bootstrap.Bootstrap.setup(Bootstrap.java:144) at org.elasticsearch.bootstrap.Bootstrap.init(Bootstrap.java:285) at org.elasticsearch.bootstrap.Elasticsearch.main(Elasticsearch.java:35) Refer to the log for complete error details. – 4.解决办法 需要创建elasearch用户和用户组创建组： groupadd elasearch创建对应的用户： useradd elasearch -g elasearch -p rootsearch回到elasticsearch-2.3.4的上级目录执行以下命令：chown -R elasearch:elasearch elasticsearch-2.3.4/切换到elasearch用户： su elasearch进入bin目录执行 ：./elasticsearch -d成功后，执行命令： curl localhost:9200,结果如下： { &quot;name&quot; : &quot;Thog&quot;, &quot;cluster_name&quot; : &quot;elasticsearch&quot;, &quot;version&quot; : { &quot;number&quot; : &quot;2.3.4&quot;, &quot;build_hash&quot; : &quot;e455fd0c13dceca8dbbdbb1665d068ae55dabe3f&quot;, &quot;build_timestamp&quot; : &quot;2016-06-30T11:24:31Z&quot;, &quot;build_snapshot&quot; : false, &quot;lucene_version&quot; : &quot;5.5.0&quot; }, &quot;tagline&quot; : &quot;You Know, for Search&quot; }","tags":[]},{"title":"互联网+和+互联网的理解","date":"2018-04-29T10:34:20.000Z","path":"2018/04/29/20180429/","text":"近年，“互联网+”成为了一个热门词，涌现出了很多互联网+企业，比如“互联网+零售”成就了淘宝和京东，“互联网+信息”成就了谷歌和百度、“互联网+内容”成就了乐视和优酷。现在“互联网+”已经被提升到了国家战略的高度、国务院也制定了“互联网+”行动计划，催生了各行各业的“互联网+”创新大潮。但是，如今的BATJ等互联网巨头已经非常强大，单一的“互联网+平台”模式很难生存和发展空间；相反，很多传统企业由于有实体和渠道支撑，业务向互联网延伸和模式创新就相对容易很多，因此，“+互联网”也就是“传统企业+互联网”成为了新的方向和潮流。但是传统企业互联网转型存在人才、技术及运营模式等方面的短板和不足，在转型的过程中，会遇到各种问题和挑战；因此需要搭建一个平台，通过这个平台实现互联网转型企业间的“分享、交流、合作”，即让转型成功的典范企业分享成功经验和问题挑战，转型企业之间能够通过这个平台进行更直接的交流和更有效的沟通，通过交流找到彼此之间的业务合作机会，从而促成这些企业之间的跨界合作。","tags":[]},{"title":"compiler error 解决办法","date":"2018-04-24T04:22:17.000Z","path":"2018/04/24/java-compiler-error/","text":"编译项目，报Error:java: Compilation failed: internal java compiler error。 原因是项目中jdk版本配置不一致，配成一致即可解决问题。 查看项目的jdk（Ctrl+Alt+shift+S） File -&gt;Project Structure-&gt;Project Settings -&gt;Project 查看工程的jdk（Ctrl+Alt+shift+S） File -&gt;Project Structure-&gt;Project Settings -&gt;module 查看idea中java配置（Ctrl+Alt+S） File -&gt;Settings&gt;Build,Execution,Deployment&gt;Compiler&gt;Java Compiler 报错的原因就在这里，idea软件环境中Java版本的配置和之前项目的配置不一样，设置成一样的即可解决该问题。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"intellij idea 2018 激活","date":"2018-04-24T04:18:22.000Z","path":"2018/04/24/active-idea2018/","text":"首次启动的时候，选择license server ，输入下方链接：http://xdouble.cn:8888/点击activate即可","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"阿里云ECS服务器java环境搭建","date":"2018-04-23T05:16:23.000Z","path":"2018/04/23/config-aliyun-ECS/","text":"jdk 配置 下载jdk 到指定的目录 /temp 解压到指定的目录：tar -zxvf jdk-8u161-linux-x64.tar.gz -C /usr/java 执行命令：cd /usr/java/jdk1.8.0_161 配置环境变量 ，执行 vim /etc/profile 在/etc/profile末尾加上 export JAVA_HOME=/usr/java/jdk1.8.0_161 export CLASSPATH=$JAVA_HOME/lib/ export PATH=$PATH:$JAVA_HOME/bin export JAVA_HOME PATH CLASSPATH 保存配置后，执行命令:source /etc/profile 查看是否jdk是否配置成功，执行命令：java -version 如果出现以下，说明配置成功。 tomcat安装和运行 下载apache-tomcat 到指定的目录 /temp 解压到指定的目录：tar -zxvf apache-tomcat-8.5.29.tar.gz -C /usr/tomcat 执行命令：cd /usr/tomcat/apache-tomcat-8.5.29 修改端口（也可以不操作），cd conf/,然后执行 vim server.xml,修改8080端口为9999，如下图： 启动tomcat 服务，执行命令 cd ../bin—&gt;./startup.sh 验证是否启动成功，执行命令：curl localhost:9999,如果正常返回html，说明成功了。 配置外网访问，需要在ECS配置入网规则，允许外网访问9999端口通过。操作过程： 控制台–&gt;实例–&gt;管理–&gt;本实例安全组–&gt;安全组列表–&gt;配置规则–&gt;入方向–&gt;添加安全组规则，如下图: 点击确定，添加安全组成功后，就可以通过外网ip:9999访问tomcat了。 mysql安装和配置 检查一下原来是否安装过mysql,执行命令：yum list installed |grep mysql,如果结果为空，说明还没有安装，如果已经安装了，就卸载重新安装。 下载mysql安装包，执行命令：rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装mysql,执行命令：yum install -y mysql-server,如果显示 Complete! 说明安装成功。 设置开机自启动服务：systemctl enable mysqld.service 查看开机自启动是否生效：systemctl |grep mysqld,如果显示如下内容，表示生效了 mysqld.service loaded active running MySQL Server 设置开启服务 systemctl start mysqld.service 查看mysql的root用户初始化密码：grep ‘temporary password’ /var/log/mysqld.log 登录mysql Server : mysql -uroot -pXXXXXX mysql 登录成功后，修改密码：mysql&gt;set PASSWORD=PASSWORD(‘new password’); 为root登录开启远程登录：mysql&gt;GRANT ALL PRIVILEGES ON . TO ‘root‘@’%’ IDENTIFIED BY ‘xxxxx’ WITH GRANT OPTION; 命令立即执行生效：mysql&gt;flush privileges; 查看mysql服务状态：systemctl status mysqld; 启动mysql服务：systemctl start mysqld; 停止mysql服务：systemctl stop mysqld; 通过本地的mysql客户端，例如navicat 连接ECS服务器上的mysql,需要配置入网访问规则，运行默认端口3306可以通过外网访问，设置参考tomcat配置规则。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"hexo deploy 提示 permission denied的解决方法","date":"2018-04-22T14:17:50.000Z","path":"2018/04/22/hexo-trouble/","text":"出现的问题 hexo deploy ,提示Error: Permission denied (publikey),如下图： 查看用户配置的ssh的public key 是否存在 执行命令： ssh -vT git@github.com,结果如下： 提示 permission denied 进入 cd ~/.ssh,查看没有 id_rsa id_rsa_pub ,所以需要生成public_key。 生成publish key 使用Git Bash生成新的ssh key。 $ cd ~ #保证当前路径在”~”下 $ ssh-keygen -t rsa -C “xxxxxx@yy.com“ #建议填写自己真实有效的邮箱地址 Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/xxxx_000/.ssh/id_rsa): #不填直接回车 Enter passphrase (empty for no passphrase): #输入密码（可以为空） Enter same passphrase again: #再次确认密码（可以为空） 成功的生成如下提示： 添加 ssh key 到 Github 登录GitHub系统；点击右上角账号头像的“▼”→Settings→SSH and GPG keys→New SSH key进入c:/Users/xxxx_000/.ssh/目录下，打开id_rsa.pub文件，全选复制公钥内容。把复制的内容放入key中，Title 自定义，点击确定。 验证public key 是否生效 再次执行 $ ssh -vT “xxxxxx@yy.com“,成功了提示 success,效果如下：","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"放松心情的时候，可以听听","date":"2017-04-16T11:04:13.000Z","path":"2017/04/16/postFor2017041601/","text":"","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"阅读<淘宝技术这十年>的体会","date":"2017-04-16T08:47:39.000Z","path":"2017/04/16/postfor20170416/","text":"阅读《淘宝技术这十年》后，觉得正明对刚入行的技术人员的建议很中肯：找到自己感兴趣的，花时间投入进去，通过实践后的知识积累比只看书本有用得多。他还引用了荀子的一句格言：不闻不若闻之，闻之不若见之，见之不若知之，知之不若行之，其英文翻译为：I hear and I forget.I see and I remember.I do and I understand.阿里的正详，说的很有道理：一个人如果把做事、做成事作为主要目标，该他得到的东西，一定会顺理成章的、水到渠成的得到。但是如果把上升作为主要目标，做同样的事，结果就会完全不一样。一句话，你的心态会最终决定你的成就。阿里小马：个“一万个小时理论”，我觉得很正确，说的就是一个人必须经 过不断地练习，不断地遇到问题才能成长起来。当然，做的时候 要不断总结，写博客是一个很好的途径。","tags":[{"name":"心得体会","slug":"心得体会","permalink":"http://caixw.cn/tags/心得体会/"}]},{"title":"年轻程序员和大龄程序员","date":"2016-12-21T13:49:11.000Z","path":"2016/12/21/20161221post1/","text":"这个时代很残酷也相对公平，残酷的地方在于世界的变化之快容不得人有片刻懈怠，公平的地方在于：不论你是年轻还是年老，都要靠实力说话。那些被时代抛弃的永远都是跑得比较慢甚至在原地徘徊的人，即所谓工作十年却只有一年的工作经验。 年轻程序员的优势在于年轻和激情， 大龄程序员的优势在于阅历和经验。所以，年轻程序员不要有跨越年龄阶段的焦虑，大龄程序员也不要觉得年轻人抢了自己的饭碗。每个年龄段都要有自己要解决和面临的问题，认清自己内心真正的需求和渴望，再去寻找适合自己的栖身之欸打怪升级，才是当务之急。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"为博客绑定域名","date":"2016-12-19T15:25:02.000Z","path":"2016/12/19/post-20161219/","text":"今天从万网买了一个域名，配置了域名解析，指向了github Pages 库，但是通过域名登陆后，老是解析不成功，原因可能是没有实名认证，访问的域名被安全局锁定。没办法，最多要等3天，期待好消息。同时要感谢我的同事的帮助。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"纪念一下，第一次发博客","date":"2016-12-18T15:37:17.000Z","path":"2016/12/18/firstPoster20161218/","text":"个人的博客第一篇内容，mark 一下，希望以后继续坚持下去。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://caixw.cn/tags/随笔/"}]},{"title":"Hello World","date":"2016-12-18T10:56:40.000Z","path":"2016/12/18/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]